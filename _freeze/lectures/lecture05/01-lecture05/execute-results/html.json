{
  "hash": "bcb40db3174c4c87ca9a8142b9d4bb16",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Brownian Motion\nformat:\n  live-html:\n    toc: true\n    toc-location: right\npyodide:\n  packages:\n    - numpy\n    - matplotlib\n---\n\n\n\n## Brownian Motion - Object-Oriented Implementation\n\n### Why Use a Class?\n\nA class is perfect for this physics simulation because each colloidal particle:\n\n1. Has specific properties\n   - Size (radius)\n   - Current position\n   - Movement history\n   - Diffusion coefficient\n\n2. Follows certain behaviors\n   - Moves randomly (Brownian motion)\n   - Updates its position over time\n   - Keeps track of where it's been\n\n3. Can exist alongside other particles\n   - Many particles can move independently\n   - Each particle keeps track of its own properties\n   - Particles can have different sizes\n\n4. Needs to track its state over time\n   - Remember previous positions\n   - Calculate distances moved\n   - Maintain its own trajectory\n\nThis natural mapping between real particles and code objects makes classes an ideal choice for our simulation.\n\n### Class Design\n\nWe design a `Colloid` class to simulate particles undergoing Brownian motion. Using object-oriented programming makes physical sense here - in the real world, each colloidal particle is an independent object with its own properties that follows the same physical laws as other particles.\n\n#### Class-Level Properties (Shared by All Particles)\nOur `Colloid` class will store information common to all particles:\n\n1. `number`: A counter tracking how many particles we've created\n2. `f = 2.2×10^{-19}`: The physical constant $k_B T/(6\\pi\\eta)$ in m³/s\n   - This combines Boltzmann's constant ($k_B$), temperature ($T$), and fluid viscosity ($\\eta$)\n   - Using this constant simplifies our diffusion calculations\n\n#### Class Methods (Functions Shared by All Particles)\nThe class provides these shared behaviors:\n\n1. `how_many()`: Returns the total count of particles created\n   - Useful for tracking how many particles exist in our simulation\n2. `__str__()`: Returns a human-readable description when we print a particle\n   - Shows the particle's radius and current position\n\n#### Instance Properties (Unique to Each Particle)\nEach individual particle will have its own:\n\n1. `R`: Radius in meters\n2. `x`, `y`: Lists storing position history (starting with initial position)\n3. `index`: Unique ID number for each particle\n4. `D`: Diffusion coefficient calculated as $D = f/R$\n   - From Einstein-Stokes relation: $D = \\frac{k_B T}{6\\pi\\eta R}$\n   - Smaller particles diffuse faster (larger D)\n\n#### Instance Methods (What Each Particle Can Do)\nEach particle object will have these behaviors:\n\n1. `update(dt)`: Performs a single timestep of Brownian motion\n   - Takes a timestep `dt` in seconds\n   - Adds random displacement based on diffusion coefficient\n   - Returns the new position\n\n2. `sim_trajectory(N, dt)`: Simulates a complete trajectory\n   - Generates N steps with timestep dt\n   - Calls `update()` repeatedly to build the trajectory\n\n3. `get_trajectory()`: Returns the particle's movement history as a DataFrame\n   - Convenient for analysis and plotting\n\n4. `get_D()`: Returns the particle's diffusion coefficient\n   - Useful for calculations and verification\n\n\n```{pyodide}\n#| autorun: false\n# Class definition\nclass Colloid:\n\n    # A class variable, counting the number of Colloids\n    number = 0\n    f = 2.2e-19 # this is k_B T/(6 pi eta) in m^3/s\n\n    # constructor\n    def __init__(self,R, x0=0, y0=0):\n        # add initialisation code here\n        self.R=R\n        self.x=[x0]\n        self.y=[y0]\n        Colloid.number=Colloid.number+1\n        self.index=Colloid.number\n        self.D=Colloid.f/self.R\n\n    def get_D(self):\n        return(self.D)\n\n    def sim_trajectory(self,N,dt):\n        for i in range(N):\n            self.update(dt)\n\n    def update(self,dt):\n        self.x.append(self.x[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        self.y.append(self.y[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        return(self.x[-1],self.y[-1])\n\n    def get_trajectory(self):\n        return(pd.DataFrame({'x':self.x,'y':self.y}))\n\n    # class method accessing a class variable\n    @classmethod\n    def how_many(cls):\n        return(Colloid.number)\n\n    # insert something that prints the particle position in a formatted way when printing\n    def __str__(self):\n        return(\"I'm a particle with radius R={0:0.3e} at x={1:0.3e},y={2:0.3e}.\".format(self.R, self.x[-1], self.y[-1]))\n```\n\n::: {.callout-note}\n### Note\n\nNote that the function `sim_trajectory` is actually calling the function `update` of the same object to generate the whole trajectory at once.\n:::\n\n## Simulation and Analysis\n\n### Simulating\n\nWith the help of this Colloid class, we would like to carry out simulations of Brownian motion of multiple particles. The simulations shall\n\n* take n=200 particles\n* have N=200 trajectory points each\n* start all at 0,0\n* particle objects should be stored in a list p_list\n\n```{pyodide}\n#| autorun: false\nN=200 # the number of trajectory points\nn=200 # the number of particles\n\np_list=[]\ndt=0.05\n\n# creating all objects\nfor i in range(n):\n    p_list.append(Colloid(1e-6))\n\n\nfor (index,p) in enumerate(p_list):\n    p.sim_trajectory(N,dt)\n```\n\n```{pyodide}\n#| autorun: false\nprint(p_list[42])\n```\n\n### Plotting the trajectories\n\nThe next step is to plot all the trajectories.\n\n```{pyodide}\n#| autorun: false\n# we take real world diffusion coefficients so scale up the data to avoid nasty exponentials\nscale=1e6\n\nplt.figure(figsize=(4,4))\n\n[plt.plot(np.array(p.x[:])*scale,np.array(p.y[:])*scale,'k-',alpha=0.1,lw=1) for p in p_list]\nplt.xlim(-10,10)\nplt.ylim(-10,10)\nplt.xlabel('x [µm]')\nplt.ylabel('y [µm]')\nplt.tight_layout()\nplt.show()\n```\n\n### Characterizing the Brownian motion\n\nNow that we have a number of trajectories, we can analyze the motion of our Brownian particles.\n\n#### Calculate the particle speed\n\nOne way is to calculate its speed by measuring how far it traveled within a certain time $n\\, dt$, where $dt$ is the timestep of out simulation. We can do that as\n\n\\begin{equation}\nv(n dt) = \\frac{<\\sqrt{(x_{i+n}-x_{i})^2+(y_{i+n}-y_{i})^2}>}{n\\,dt}\n\\end{equation}\n\nThe angular brackets on the top take care of the fact that we can measure the distance traveled within a certain time $n\\, dt$ several times along a trajectory.\n\nThese values can be used to calculate a mean speed. Note that there is not an equal amount of data pairs for all separations available. For $n=1$ there are 5 distances available. For $n=5$, however, only 1. This changes the statistical accuracy of the mean.\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    md=[np.mean(np.sqrt(t.x.diff(i)**2+t.y.diff(i)**2)) for i in range(1,N)]\n    md=md/time\n    plt.plot(time,md,alpha=0.4)\n\nplt.ylabel('speed [m/s]')\nplt.xlabel('time [s]')\nplt.tight_layout()\nplt.show()\n```\n\nThe result of this analysis shows, that each particle has an apparent speed which seems to increase with decreasing time of observation or which decreases with increasing time. This would mean that there is some friction at work, which slows down the particle in time, but this is apparently not true. Also an infinite speed at zero time appears to be unphysical.\nThe correct answer is just that the speed is no good measure to characterize the motion of a Brownian particle.\n\n#### Calculate the particle mean squared displacement\n\nA better way to characterize the motion of a Brownian particle is the mean squared displacement, as we have already mentioned it in previous lectures. We may compare our simulation now to the theoretical prediction, which is\n\n\\begin{equation}\n\\langle \\Delta r^{2}(t)\\rangle=2 d D t\n\\end{equation}\n\nwhere $d$ is the dimension of the random walk, which is $d=2$ in our case.\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    msd=[np.mean(t.x.diff(i).dropna()**2+t.y.diff(i).dropna()**2) for i in range(1,N)]\n    plt.plot(time,msd,alpha=0.4)\n\n\nplt.loglog(time, 4*p_list[0].D*time,'k--',lw=2,label='theory')\nplt.legend()\nplt.xlabel('time [s]')\nplt.ylabel('msd $[m^2/s]$')\nplt.tight_layout()\nplt.show()\n```\n\nThe results show that the mean squared displacement of the individual particles follows *on average* the theoretical predictions of a linear growth in time. That means, we are able to read the diffusion coefficient from the slope of the MSD of the individual particles if recorded in a simulation or an experiment.\n\nYet, each individual MSD is deviating strongly from the theoretical prediction especially at large times. This is due to the fact mentioned earlier that our simulation (or experimental) data only has a limited number of data points, while the theoretical prediction is made for the limit of infinite data points.\n\n\n::: {.callout-warning}\n### Analysis of MSD data\n\nSingle particle tracking, either in the experiment or in numerical simulations can therefore only deliver an estimate of the diffusion coefficient and care should be taken when using the whole MSD to obtain the diffusion coefficient. One typically uses only a short fraction of the whole MSD data at short times.\n:::\n\n## Summary\n\nIn this lecture, we have:\n\n1. Explored the physical principles behind Brownian motion and its mathematical description\n2. Implemented a computational model using object-oriented programming principles\n3. Created a `Colloid` class with properties and methods that simulate realistic particle behavior\n4. Generated and visualized multiple particle trajectories\n5. Analyzed the simulation results using mean squared displacement calculations\n6. Compared our numerical results with theoretical predictions\n\nThis exercise demonstrates how object-oriented programming provides an elegant framework for physics simulations, where the objects in our code naturally represent physical entities in the real world.\n\n## Further Reading\n\n- Einstein, A. (1905). \"On the Movement of Small Particles Suspended in Stationary Liquids Required by the Molecular-Kinetic Theory of Heat\"\n- Berg, H.C. (1993). \"Random Walks in Biology\"\n- Chandrasekhar, S. (1943). \"Stochastic Problems in Physics and Astronomy\"\n- Nelson, E. (2001). \"Dynamical Theories of Brownian Motion\"\n\n",
    "supporting": [
      "01-lecture05_files"
    ],
    "filters": [],
    "includes": {}
  }
}