{
  "hash": "593294b8f857362891e5ac6e4f3ac6c7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Trapezoid Method\n---\n\n\n\n### Theory and Implementation\n\n![Trapezoid Method Illustration](img/trapez.png)\n\nThe Trapezoid method improves upon the Box method by approximating the function with linear segments between consecutive points. Instead of using constant values within each interval, it connects adjacent points with straight lines, forming trapezoids.\n\nThe mathematical formula for the Trapezoid method is:\n\n\\begin{equation}\n\\int_{a}^{b} f(x) dx \\approx \\sum_{i=1}^{N-1} \\frac{f(x_i) + f(x_{i+1})}{2} \\Delta x\n\\end{equation}\n\nWhere:\n- $\\Delta x = \\frac{b-a}{N-1}$ is the width of each interval\n- $x_i$ are the sample points\n\nThis method is particularly effective for smoothly varying functions, which are common in physical systems.\n\n```{pyodide}\ndef int_trap(f, a, b, N):\n    \"\"\"Trapezoid method integration\"\"\"\n    if N < 2:\n        raise ValueError(\"N must be at least 2\")\n    x = np.linspace(a, b, N)\n    y = f(x)\n    dx = (b-a)/(N-1)\n    return np.sum((y[1:] + y[:-1]) * dx/2)\n\n# Simple demonstration\ndef f_demo(x):\n    return x**2  # Using f(x) = x² for demonstration\n\n# Demonstrate the trapezoid method visually\nx_demo = np.linspace(0, 1, 6)\ny_demo = f_demo(x_demo)\n\nplt.figure(figsize=get_size(15, 8))\n\n# Plot the actual function\nx_fine = np.linspace(0, 1, 1000)\ny_fine = f_demo(x_fine)\nplt.plot(x_fine, y_fine, 'b-', label='Actual function f(x) = x²')\n\n# Plot the trapezoids\nfor i in range(len(x_demo)-1):\n    plt.fill_between([x_demo[i], x_demo[i+1]], \n                    [y_demo[i], y_demo[i+1]], \n                    alpha=0.3, color='green')\n    plt.plot([x_demo[i], x_demo[i+1]], [y_demo[i], y_demo[i+1]], 'g-')\n\nplt.plot(x_demo, y_demo, 'go', label='Sample points')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title('Trapezoid Method Visualization')\nplt.grid(True)\nplt.legend()\nplt.show()\n\n# Quick convergence test\nexact = 1/3  # Exact integral of x² from 0 to 1\nN_test = [5, 10, 50, 100]\nerrors = [abs(int_trap(f_demo, 0, 1, n) - exact) for n in N_test]\n\nprint(\"Trapezoid Method Error Convergence:\")\nprint(f\"{'N':<8} {'Error':<15}\")\nprint(\"-\" * 24)\nfor n, err in zip(N_test, errors):\n    print(f\"{n:<8} {err:.10f}\")\n```\n\n### Physics Application: Electric Potential Calculation\n\nThe Trapezoid method is well-suited for calculating the electric potential due to a charge distribution. For a linear charge density $\\lambda(x)$ along the x-axis, the potential at point $(0,d)$ is given by:\n\n\\begin{equation}\nV(0,d) = \\frac{1}{4\\pi\\epsilon_0} \\int_{a}^{b} \\frac{\\lambda(x)}{\\sqrt{x^2 + d^2}} dx\n\\end{equation}\n\nThis integral can be efficiently computed using the Trapezoid method, especially when the charge distribution is known at discrete points.\n\n\n",
    "supporting": [
      "trapezoid_short_files"
    ],
    "filters": [],
    "includes": {}
  }
}