{
  "hash": "66a378da982cd749f8d9a955f5aabc48",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Simpson's Method\n---\n\n\n\n### Theory and Implementation\n\n![Simpson's Method Illustration](img/simpson.png)\n\nSimpson's method provides higher accuracy by approximating the function with parabolic segments rather than straight lines. This approach is particularly effective for functions with curvature, which are ubiquitous in physics problems.\n\nThe mathematical formulation of Simpson's rule is:\n\n\\begin{equation}\n\\int_{a}^{b} f(x) dx \\approx \\frac{\\Delta x}{3} \\sum_{i=0}^{(N-1)/2} \\left(f(x_{2i}) + 4f(x_{2i+1}) + f(x_{2i+2})\\right)\n\\end{equation}\n\nWhere:\n- $N$ is the number of intervals (must be even)\n- $\\Delta x = \\frac{b-a}{N}$ is the width of each interval\n\nSimpson's rule is derived from fitting a quadratic polynomial through every three consecutive points and then integrating these polynomials.\n\n```{pyodide}\ndef int_simp(f, a, b, N):\n    \"\"\"Simpson's method integration\"\"\"\n    if N % 2 == 0:\n        N = N + 1  # Ensure N is odd for Simpson's rule\n    \n    if N < 3:\n        raise ValueError(\"N must be at least 3 for Simpson's method\")\n\n    x = np.linspace(a, b, N)\n    y = f(x)\n    dx = (b-a)/(N-1)\n    \n    # Apply Simpson's formula: (f(xu2080) + 4f(xu2081) + f(xu2082))*dx/3 for each segment\n    return dx/3 * np.sum(y[0:-2:2] + 4*y[1:-1:2] + y[2::2])\n\n# Demonstrate Simpson's method with a simple example\ndef f_demo(x):\n    \"\"\"Example function: sin(x)\"\"\"\n    return np.sin(x)\n\n# Visualize Simpson's method with a few segments\nx_demo = np.linspace(0, np.pi, 7)  # 6 intervals\ny_demo = f_demo(x_demo)\n\nplt.figure(figsize=get_size(15, 8))\n\n# Plot the actual function\nx_fine = np.linspace(0, np.pi, 1000)\ny_fine = f_demo(x_fine)\nplt.plot(x_fine, y_fine, 'b-', label='f(x) = sin(x)')\n\n# Plot the parabolic segments\nfor i in range(0, len(x_demo)-2, 2):\n    x_segment = np.linspace(x_demo[i], x_demo[i+2], 50)\n    \n    # Fit a quadratic polynomial through three points\n    x_points = x_demo[i:i+3]\n    y_points = y_demo[i:i+3]\n    coeffs = np.polyfit(x_points, y_points, 2)\n    y_fit = np.polyval(coeffs, x_segment)\n    \n    plt.plot(x_segment, y_fit, 'r-', alpha=0.7)\n    plt.fill_between(x_segment, 0, y_fit, alpha=0.2, color='purple')\n\nplt.plot(x_demo, y_demo, 'go', label='Sample points')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title(\"Simpson's Method Visualization\")\nplt.grid(True)\nplt.legend()\nplt.show()\n\n# Convergence demonstration with a simple test function\nf_test = lambda x: x**4  # We can integrate x⁴ exactly\nexact_value = 1/5  # Exact integral of x⁴ from 0 to 1\n\n# Compare accuracy with different numbers of points\nN_test = [3, 5, 9, 17]  # Odd numbers for Simpson's rule\nerrors = [abs(int_simp(f_test, 0, 1, n) - exact_value) for n in N_test]\n\nprint(\"Simpson's Method Error Convergence:\")\nprint(f\"{'N':<8} {'Error':<15}\")\nprint(\"-\" * 24)\nfor n, err in zip(N_test, errors):\n    print(f\"{n:<8} {err:.12f}\")\n```\n\n### Physics Application: Quantum Mechanics\n\nA critical application of Simpson's method in physics is calculating probabilities in quantum mechanics. For a wavefunction $\\psi(x)$, the probability of finding a particle in a region $[a,b]$ is:\n\n\\begin{equation}\nP(a \\leq x \\leq b) = \\int_{a}^{b} |\\psi(x)|^2 dx\n\\end{equation}\n\nSimpson's method provides the accuracy needed for these calculations, particularly for oscillatory wavefunctions where simpler methods would require many more points to achieve the same precision.\n\n\n",
    "supporting": [
      "simpson_short_files"
    ],
    "filters": [],
    "includes": {}
  }
}