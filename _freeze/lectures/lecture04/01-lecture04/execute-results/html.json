{
  "hash": "339e33aab7f4630a4d53729f2f54da94",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Classes and Objects\nformat:\n  live-html:\n    toc: true\n    toc-location: right\npyodide:\n  packages:\n    - numpy\n    - matplotlib\n---\n\n\n```{pyodide}\n#| edit: false\n#| echo: false\n# include the required modules\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle, Rectangle\nimport matplotlib.patches as mpatches\n\nplt.rcParams.update({'font.size': 12,\n                     'lines.linewidth': 1,\n                     'lines.markersize': 10,\n                     'axes.labelsize': 11,\n                     'xtick.labelsize' : 10,\n                     'ytick.labelsize' : 10,\n                     'xtick.top' : True,\n                     'xtick.direction' : 'in',\n                     'ytick.right' : True,\n                     'ytick.direction' : 'in',})\n```\n\n## Introduction to Object Oriented Programming\n\nImagine you're simulating a complex physical system—perhaps a collection of interacting particles or cells. Each entity in your simulation has both properties (position, velocity, size) and behaviors (move, interact, divide). How do you organize this complexity in your code?\n\n### From Procedural to Object-Oriented Thinking\n\nIn previous lectures, we've designed programs using a **procedural approach**—organizing code around functions that operate on separate data structures. While this works for simpler problems, it can become unwieldy as systems grow more complex.\n\n**Object-oriented programming (OOP)** offers a more intuitive paradigm: it combines data and functionality together into self-contained units called **objects**. Instead of having separate variables and functions, each object maintains its own state and defines its own behaviors.\n\nFor computational modeling, this is particularly powerful because:\n\n- Objects can directly represent the entities you're modeling (particles, cells, molecules)\n- Code organization mirrors the structure of the real-world system\n- Complex systems become easier to build incrementally and modify later\n\n## The Building Blocks: Classes and Objects\n\nObject-oriented programming is built upon two fundamental concepts: classes and objects.\n\n\n::: {#fig-classes-objects}\n![](/lectures/lecture04/img/classes-objects.png)\n\nSketch of the relation of classes and objects\n:::\n\n\n::: {.panel-tabset}\n### Classes: Creating Blueprints\n\nA **class** serves as a blueprint or template that defines a new type of object. Think of it as a mold that creates objects with specific characteristics and behaviors. It specifies:\n\n* What data the object will store (properties)\n* What operations the object can perform (methods)\n\n### Objects: Creating Instances\n\nAn **object** is a specific instance of a class—a concrete realization of that blueprint. When you create an object, you're essentially saying \"make me a new thing based on this class design.\"\n\nObjects have two main components:\n\n* **Properties** (also called attributes or fields): Variables that store data within the object\n* **Methods**: Functions that define what the object can do and how it manipulates its data\n\n### Properties: Storing Data\n\nProperties come in two varieties:\n\n* **Instance variables**: Unique to each object instance (each object has its own copy)\n* **Class variables**: Shared among all instances of the class (one copy for the entire class)\n\nFor example, if you had a `Colloid` class for a particle simulation:\n\n- Instance variables might include `radius` and `position` (unique to each particle)\n- Class variables might include `material_density` (same for all colloids of that type)\n- Methods might include `move()` or `calculate_volume()`\n:::\n\n## Working with Classes in Python\n\n### Creating a Class\n\nTo define a class in Python, we use this basic syntax:\n\n```python\nclass ClassName:\n    # Class content goes here\n```\n\nThe definition starts with the `class` keyword, followed by the class name, and a colon. The class content is indented and contains all properties and methods of the class.\n\nLet's start with a minimal example that represents a colloidal particle:\n\n```{pyodide}\n#| autorun: false\n# Define a minimal empty class for a colloidal particle\nclass Colloid:\n    pass  # 'pass' creates an empty class with no properties or methods\n\n# Create an instance of the Colloid class\nparticle = Colloid()\n\n# Display the particle object (shows its memory location)\nprint(particle)\n```\n\nEven this empty class is a valid class definition, though it doesn't do anything useful yet. Let's start adding functionality to make it more practical.\n\n### Creating Methods\n\nMethods are functions that belong to a class. They define the behaviors and capabilities of your objects.\n\n```{pyodide}\n#| autorun: false\n# Define a Colloid class with a method\nclass Colloid:\n    # Define a method that identifies the type of colloid\n    def type(self):\n        print('I am a plastic colloid')\n\n# Create two separate colloid objects\np = Colloid()  # First colloid instance\nb = Colloid()  # Second colloid instance\n\n# Call the type method on each object\nprint(\"Particle p says:\")\np.type()\n\nprint(\"\\nParticle b says:\")\nb.type()\n```\n\n::: {.callout-tip}\n## Understanding `self` in Python Classes\n\nEvery method in a Python class automatically receives a special first parameter, conventionally named `self`. This parameter represents the specific instance of the class that calls the method.\n\nKey points about `self`:\n- It's automatically passed by Python when you call a method\n- It gives the method access to the instance's properties and other methods\n- By convention, we name it `self` (though technically you could use any valid name)\n- You don't include it when calling the method\n\nExample:\n```python\nclass Colloid:\n    def type(self):  # self is automatically provided\n        print('I am a plastic colloid')\n\n# Usage:\nparticle = Colloid()\nparticle.type()  # Notice: no argument needed for self\n```\n\nIn this example, even though `type()` appears to take no arguments when called, Python automatically passes `particle` as the `self` parameter.\n:::\n\n### The Constructor Method: `__init__`\n\nThe `__init__` method is a special method called when a new object is created. It lets you initialize the object's properties with specific values.\n\n```{pyodide}\n#| autorun: false\n# Define a Colloid class with constructor and a method\nclass Colloid:\n    # Constructor: Initialize a new colloid with a specific radius\n    def __init__(self, R):\n        # Store the radius as an instance variable (unique to each colloid)\n        self.R = R\n\n    # Method to retrieve the radius\n    def get_size(self):\n        return self.R\n\n# Create two colloids with different radii\nparticle1 = Colloid(5)  # Creates a colloid with radius 5 µm\nparticle2 = Colloid(2)  # Creates a colloid with radius 2 µm\n\n# Get and display the size of each particle\nprint(f'Particle 1 radius: {particle1.get_size()} µm')\nprint(f'Particle 2 radius: {particle2.get_size()} µm')\n\n# We can also directly access the R property\nprint(f'Accessing radius directly: {particle1.R} µm')\n```\n\n::: {.callout-note}\nPython also provides a `__del__` method (destructor) that's called when an object is deleted. This can be useful for cleanup operations or tracking object lifecycles.\n:::\n\n### String Representation: The `__str__` Method\n\nThe `__str__` method defines how an object should be represented as a string. It's automatically called when:\n- You use `print(object)`\n- You convert the object to a string using `str(object)`\n\nThis method helps make your objects more readable and informative:\n\n```{pyodide}\n#| autorun: false\n# Define a Colloid class with string representation\nclass Colloid:\n    def __init__(self, R):\n        self.R = R  # Initialize radius\n\n    def get_size(self):\n        return self.R\n\n    # Define how the object should be displayed as text\n    def __str__(self):\n        return f'Colloid particle with radius {self.R:.1f} µm'\n\n# Create colloids with different radii\nparticle1 = Colloid(15)\nparticle2 = Colloid(3.567)\n\n# Print the objects - this automatically calls __str__\nprint(\"Particle 1:\", particle1)\nprint(\"Particle 2:\", particle2)\n```\n\n::: {.callout-tip}\nThe `.1f` format specification means the radius will be displayed with one decimal place. This helps make your output more readable. You can customize this string representation to show whatever information about your object is most relevant.\n:::\n\n\n## Managing Data in Classes\n\n### Class Variables vs. Instance Variables\n\nOne of the core features of OOP is how it manages data. Python classes offer two distinct types of variables:\n\n#### Class Variables: Shared Among All Objects\n\n* **Definition**: Variables defined directly inside the class but outside any method\n* **Behavior**: All instances of the class share the **same copy** of these variables\n* **Usage**: For properties that should be the same across all instances\n* **Access pattern**: Typically accessed as `ClassName.variable_name`\n\n#### Instance Variables: Unique to Each Object\n\n* **Definition**: Variables defined within methods, typically in `__init__`\n* **Behavior**: Each object has its **own separate copy** of these variables\n* **Usage**: For properties that can vary between different instances\n* **Access pattern**: Typically accessed as `self.variable_name` within methods\n\nHere's a practical example showing both types of variables in action:\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    # Class variable: shared by all colloids\n    material = \"polystyrene\"  # All colloids made of the same material\n    total_particles = 0       # Counter to track total number of particles\n\n    def __init__(self, R, position=(0,0)):\n        # Instance variables: each particle has its own\n        self.R = R                # Radius - unique to each particle\n        self.position = position  # Position - unique to each particle\n\n        # Update the class variable when a new particle is created\n        Colloid.total_particles += 1\n\n    def __del__(self):\n        # Update the class variable when a particle is deleted\n        Colloid.total_particles -= 1\n        print(f\"Particle deleted, {Colloid.total_particles} remaining\")\n\n    def __str__(self):\n        return f\"Colloid(R={self.R}, pos={self.position})\"\n\n    def change_material(new_material):\n        # This changes the material for ALL colloids\n        Colloid.material = new_material\n\n# Create some particles with different radii and positions\nprint(\"Creating particles...\")\np1 = Colloid(3, (0, 0))      # Radius 3, at origin\np2 = Colloid(5, (10, 5))     # Radius 5, at position (10,5)\np3 = Colloid(7, (-5, -5))    # Radius 7, at position (-5,-5)\n\n# Each particle has its own radius and position (instance variables)\nprint(f\"\\nInstance variables (unique to each object):\")\nprint(f\"p1: radius={p1.R}, position={p1.position}\")\nprint(f\"p2: radius={p2.R}, position={p2.position}\")\nprint(f\"p3: radius={p3.R}, position={p3.position}\")\n\n# All particles share the same material and total_particles count (class variables)\nprint(f\"\\nClass variables (shared by all objects):\")\nprint(f\"Material for all particles: {Colloid.material}\")\nprint(f\"Total particles: {Colloid.total_particles}\")\n\n# Change the material - affects all particles\nColloid.material = \"silica\"\nprint(f\"\\nAfter changing material to {Colloid.material}:\")\nprint(f\"p1 material: {Colloid.material}\")\nprint(f\"p2 material: {Colloid.material}\")\n\n# Delete one particle to see the counter decrease\nprint(\"\\nDeleting p3...\")\ndel p3\nprint(f\"Total particles remaining: {Colloid.total_particles}\")\n```\n\n### When to Use Each Type of Variable\n\n#### Use Class Variables When:\n- A property should be the same for all instances (like physical constants)\n- You need to track information about the class as a whole (like counters)\n- You want to save memory by not duplicating unchanging values\n\n#### Use Instance Variables When:\n- Objects need their own independent state\n- Properties vary between instances (position, size, etc.)\n- You're representing unique characteristics of individual objects\n\n::: {.callout-warning}\nBe careful when modifying class variables! Since they're shared, changes will affect all instances of the class. This can lead to unexpected behavior if not managed carefully.\n:::\n\n",
    "supporting": [
      "01-lecture04_files"
    ],
    "filters": [],
    "includes": {}
  }
}