{
  "hash": "5c6cc88636b0f7141c808e8b43a6ae3d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Classes and Objects\nformat: pdf\npyodide:\n  packages:\n    - numpy\n    - matplotlib\n---\n\n```{pyodide}\n#| edit: false\n#| echo: false\n# include the required modules\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams.update({'font.size': 12,\n                     'lines.linewidth': 1,\n                     'lines.markersize': 10,\n                     'axes.labelsize': 11,\n                     'xtick.labelsize' : 10,\n                     'ytick.labelsize' : 10,\n                     'xtick.top' : True,\n                     'xtick.direction' : 'in',\n                     'ytick.right' : True,\n                     'ytick.direction' : 'in',})\n```\n\n\n\n## Object oriented programming\n\nA very useful programming concept is object oriented programming. In all the programs we wrote till now, we have designed our program around functions i.e. blocks of statements which manipulate data. This is called the procedure-oriented way of programming.\n\nThere is another way of organizing your program which is to combine data and functionality and wrap it inside something called an object. This is called the object oriented programming paradigm, which will be useful especially for larger programs.\n\n### Classes and Objects\n\nObject-oriented programming is built upon two fundamental concepts: classes and objects.\n\n* A class is a blueprint or template that defines a new type of object. Think of it as a mold that creates objects with specific characteristics and behaviors.\n\n* Objects are specific instances of a class. They have two main components:\n  - **Properties** (also called attributes or fields): Variables that store data within the object\n  - **Methods**: Functions that define what the object can do\n\n* Properties come in two varieties:\n\n  - **Instance variables**: Unique to each object instance (each object has its own copy)\n  - **Class variables**: Shared among all instances of the class (one copy for the entire class)\n\nFor example, if you had a `Car` class:\n- Instance variables might include `color` and `mileage` (unique to each car)\n- Class variables might include `number_of_wheels` (same for all cars)\n- Methods might include `start_engine()` or `brake()`\n\n### Creating Classes\n\nTo define a class in Python, we use this basic syntax:\n\n```python\nclass ClassName:\n    # Class content goes here\n```\n\nThe definition starts with the `class` keyword, followed by the class name, and a colon. The class content is indented and contains all properties and methods of the class.\n\nHere's a minimal example:\n\n\n\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    pass  # 'pass' creates an empty class with no properties or methods\n```\n\n\n\n\nTo create an object (an instance) of this class:\n\n\n\n\n```{pyodide}\n#| autorun: false\nparticle = Colloid()\nparticle  # Prints the object's location in memory\n```\n\n\n\n\n\n## Class Methods\n\nMethods are functions that belong to a class. They define the behavior of the class and can operate on the class's properties.\n\n::: {.callout-tip}\n## Understanding `self` in Python Classes\n\nEvery method in a Python class automatically receives a special first parameter, conventionally named `self`. This parameter refers to the specific instance of the class that calls the method.\n\nKey points about `self`:\n- It's automatically passed by Python when you call a method\n- It gives the method access to the instance's properties\n- By convention, we name it `self` (though technically you could use any valid name)\n- You don't include it when calling the method\n\nExample:\n```python\nclass Colloid:\n    def type(self):  # self is automatically provided\n        print('I am a plastic colloid')\n\n# Usage:\nparticle = Colloid()\nparticle.type()  # Notice: no argument needed for self\n```\n\nIn this example, even though `type()` appears to take no arguments when called, it actually receives the `particle` object as `self`.\n:::\n\n\n\n\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    def type(self):\n        print('I am a plastic colloid')\n\np = Colloid()\np.type()\n\nb=Colloid()\nb.type()\n```\n\n\n\n\n### The Constructor Method: `__init__`\n\nThe `__init__` method (called the constructor) is a special method that initializes a new object when it's created. It allows you to:\n- Set up initial values for the object's properties\n- Perform any setup the object needs when it's created\n\nThe name has double underscores (dunders) at both ends: `__init__`\n\nHere's an example:\n\n\n\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    def __init__(self, R):\n        self.R = R  # Stores the radius as an instance variable\n\n    def get_size(self):\n        return self.R  # Method to retrieve the radius\n```\n\n\n\n\nUsing the class:\n\n\n\n```{pyodide}\n#| autorun: false\n# Create two colloids with different radii\nparticle1 = Colloid(5)  # radius = 5\nparticle2 = Colloid(2)  # radius = 2\n\n# Get the size of particle1\nprint(f'Colloid radius is {particle1.get_size()} Âµm')\n```\n\n\n\n\n::: {.callout-note}\nPython also provides a `__del__` method (destructor) that's called when an object is deleted. We'll see this in action later.\n:::\n\n\n### The String Representation: `__str__` Method\n\nThe `__str__` method defines how an object should be represented as a string. Python automatically calls this method when:\n- You use `print(object)`\n- You convert the object to a string using `str(object)`\n\nHere's an example:\n\n\n\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    def __init__(self, R):\n        self.R = R  # Initialize radius\n\n    def get_size(self):\n        return self.R\n\n    def __str__(self):\n        # Define how the object should be displayed as text\n        return f'I am a plastic colloid of radius {self.R:.1f}'\n```\n\n\n\n::: {.callout-tip}\nThe `.1f` format specification means the radius will be displayed with one decimal place. You can customize this string representation to show whatever information about your object is most relevant.\n:::\n\n\nLet's see it in action:\n\n\n\n```{pyodide}\n#| autorun: false\n# Create a colloid with radius 15\nparticle = Colloid(15)\n\n# Print the object - this automatically calls __str__\nprint(particle)\n```\n\n\n\n\n\n## Understanding Class and Instance Variables\n\nIn Python classes, we can have two types of variables that store data:\n\n### Class Variables (Shared Data)\n- Shared among all instances of a class\n- Defined inside the class but outside any method\n- All objects share the same copy of these variables\n- Changes affect all instances\n- Useful for tracking data common to all instances\n\n### Instance Variables (Individual Data)\n- Unique to each instance/object\n- Usually defined in `__init__`\n- Each object has its own copy\n- Changes only affect that specific instance\n- Useful for object-specific properties\n\nHere's a practical example:\n\n\n\n\n```{pyodide}\n#| autorun: false\nclass Colloid:\n    # Class variable: tracks total number of particles\n    total_particles = 0\n\n    def __init__(self, R):\n        # Instance variable: each particle has its own radius\n        self.R = R\n        # Increment counter when new particle is created\n        Colloid.total_particles += 1\n\n    def __del__(self):\n        # Decrement counter when particle is deleted\n        Colloid.total_particles -= 1\n```\n\n\n\n\nLet's see how it works:\n\n\n\n```{pyodide}\n#| autorun: false\n# Create two particles\np1 = Colloid(3)   # Particle with radius 3\np2 = Colloid(12)  # Particle with radius 12\n\n# Each particle has its own radius (instance variable)\nprint(f\"Particle radii: p1 = {p1.R}, p2 = {p2.R}\")\n\n# Both share the same total_particles count (class variable)\nprint(f\"Total particles: {Colloid.total_particles}\")\n\n# Delete one particle\ndel p2\nprint(f\"After deletion, total particles: {Colloid.total_particles}\")\n```\n\n\n\n\n::: {.callout-tip}\nCommon uses for class variables:\n\n- Counters (like tracking total instances)\n- Constants shared by all instances\n- Configuration values for all objects\n:::\n\n",
    "supporting": [
      "01_lecture04_files"
    ],
    "filters": []
  }
}