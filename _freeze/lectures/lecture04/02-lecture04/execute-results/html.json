{
  "hash": "f1bd205bfdab4fa4b0928e1496632993",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Brownian Motion\nformat:\n  live-html:\n    toc: true\n    toc-location: right\npyodide:\n  packages:\n    - numpy\n    - matplotlib\n---\n\n## Introduction\n\nBrownian motion is a fundamental physical phenomenon that describes the random movement of particles suspended in a fluid. This lecture explores both the physical understanding and computational modeling of Brownian motion using object-oriented programming techniques.\n\nWe will apply our newly acquired knowledge about classes to simulate Brownian motion. This task aligns perfectly with the principles of object-oriented programming, as each Brownian particle (or colloid) can be represented as an object instantiated from the same class, albeit with different properties. For instance, some particles might be larger while others are smaller. We have already touched on some aspects of this in previous lectures.\n\n\n```{pyodide}\n#| autorun: true\n#| edit: false\n#| echo: false\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nplt.rcParams.update({'font.size': 12,\n                     'lines.linewidth': 1,\n                     'lines.markersize': 10,\n                     'axes.labelsize': 11,\n                     'xtick.labelsize' : 10,\n                     'ytick.labelsize' : 10,\n                     'xtick.top' : True,\n                     'xtick.direction' : 'in',\n                     'ytick.right' : True,\n                     'ytick.direction' : 'in',})\n```\n\n\n## Brownian Motion\n\n### What is Brownian Motion?\nImagine a dust particle floating in water. If you look at it under a microscope, you'll see it moving in a random, zigzag pattern. This is Brownian motion!\n\n\n### Why Does This Happen?\nWhen we observe Brownian motion, we're seeing the effects of countless molecular collisions. Water isn't just a smooth, continuous fluid - it's made up of countless tiny molecules that are in constant motion. These water molecules are continuously colliding with our particle from all directions. Each individual collision causes the particle to move just a tiny bit, barely noticeable on its own. However, when millions of these tiny collisions happen every second from random directions, they create the distinctive zigzag motion we observe.\n\n\n```{ojs}\n//| echo: false\n//| label: fig-BM\n//| fig-cap: Interactive simulation of Brownian motion. The blue circle represents a larger colloid, which moves randomly due to collisions with the smaller red particles. The fading blue trail shows the random path of the colloid.\n\nbrownianMotion = {\n  const width = 400;\n  const height = 400;\n\n  // Create SVG container\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Add a border for clarity\n  svg.append(\"rect\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n\n  // Parameters for our simulation - adjusted for better physical representation\n  const numSmallParticles = 400;\n  const largeParticleRadius = 10;\n  const smallParticleRadius = 5;  // Increased scale separation\n  const largeParticleColor = \"blue\";\n  const smallParticleColor = \"red\";\n  const trailLength = 300;\n\n  // Physical parameters\n  const temperature = 10.0;  // Normalized temperature\n  const gamma = 0.1;        // Drag coefficient for large particle\n\n  // Calculate masses based on radius^3 (proportional to volume)\n  const largeMass = Math.pow(largeParticleRadius, 3);\n  const smallMass = Math.pow(smallParticleRadius, 3);\n\n  // Maxwell-Boltzmann distribution helper\n  function maxwellBoltzmannVelocity() {\n    // Box-Muller transform for normal distribution\n    const u1 = Math.random();\n    const u2 = Math.random();\n    const mag = Math.sqrt(-2.0 * Math.log(u1)) * Math.sqrt(temperature / smallMass);\n    const theta = 2 * Math.PI * u2;\n    return {\n      vx: mag * Math.cos(theta),\n      vy: mag * Math.sin(theta)\n    };\n  }\n\n  // Initialize large particle in the center\n  let largeParticle = {\n    x: width / 2,\n    y: height / 2,\n    vx: 0,\n    vy: 0,\n    radius: largeParticleRadius,\n    mass: largeMass,\n    // Store previous positions for trail\n    trail: Array(trailLength).fill().map(() => ({\n      x: width / 2,\n      y: height / 2\n    }))\n  };\n\n  // Initialize small particles with random positions and thermal velocities\n  const smallParticles = Array(numSmallParticles).fill().map(() => {\n    const vel = maxwellBoltzmannVelocity();\n    return {\n      x: Math.random() * width,\n      y: Math.random() * height,\n      vx: vel.vx * 8,  // Scale for visibility\n      vy: vel.vy * 8,  // Scale for visibility\n      radius: smallParticleRadius,\n      mass: smallMass\n    };\n  });\n\n  // Create the large particle\n  const largeParticleElement = svg.append(\"circle\")\n    .attr(\"cx\", largeParticle.x)\n    .attr(\"cy\", largeParticle.y)\n    .attr(\"r\", largeParticle.radius)\n    .attr(\"fill\", largeParticleColor);\n\n  // Create the trail for the large particle\n  const trailElements = svg.append(\"g\")\n    .selectAll(\"circle\")\n    .data(largeParticle.trail)\n    .join(\"circle\")\n    .attr(\"cx\", d => d.x)\n    .attr(\"cy\", d => d.y)\n    .attr(\"r\", (_, i) => 1)\n    .attr(\"fill\", \"rgba(0, 0, 255, 0.2)\");\n\n  // Create the small particles\n  const smallParticleElements = svg.append(\"g\")\n    .selectAll(\"circle\")\n    .data(smallParticles)\n    .join(\"circle\")\n    .attr(\"cx\", d => d.x)\n    .attr(\"cy\", d => d.y)\n    .attr(\"r\", d => d.radius)\n    .attr(\"fill\", smallParticleColor);\n\n  // Function to update particle positions\n  function updateParticles() {\n    // Apply drag to large particle (Stokes' law)\n    largeParticle.vx *= (1 - gamma);\n    largeParticle.vy *= (1 - gamma);\n\n    // Update small particles\n    smallParticles.forEach((particle, i) => {\n      // Move according to velocity\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n\n      // Bounce off walls\n      if (particle.x < particle.radius || particle.x > width - particle.radius) {\n        particle.vx *= -1;\n        particle.x = Math.max(particle.radius, Math.min(width - particle.radius, particle.x));\n      }\n      if (particle.y < particle.radius || particle.y > height - particle.radius) {\n        particle.vy *= -1;\n        particle.y = Math.max(particle.radius, Math.min(height - particle.radius, particle.y));\n      }\n\n      // Check for collision with large particle\n      const dx = largeParticle.x - particle.x;\n      const dy = largeParticle.y - particle.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < largeParticle.radius + particle.radius) {\n        // Physically correct elastic collision\n\n        // Calculate unit normal vector (collision axis)\n        const nx = dx / distance;\n        const ny = dy / distance;\n\n        // Calculate unit tangent vector (perpendicular to collision)\n        const tx = -ny;\n        const ty = nx;\n\n        // Project velocities onto normal and tangential axes\n        const v1n = largeParticle.vx * nx + largeParticle.vy * ny;\n        const v1t = largeParticle.vx * tx + largeParticle.vy * ty;\n        const v2n = particle.vx * nx + particle.vy * ny;\n        const v2t = particle.vx * tx + particle.vy * ty;\n\n        // Calculate new normal velocities using conservation of momentum and energy\n        // Tangential velocities remain unchanged in elastic collision\n        const m1 = largeParticle.mass;\n        const m2 = particle.mass;\n\n        // One-dimensional elastic collision formula\n        const v1nAfter = (v1n * (m1 - m2) + 2 * m2 * v2n) / (m1 + m2);\n        const v2nAfter = (v2n * (m2 - m1) + 2 * m1 * v1n) / (m1 + m2);\n\n        // Convert back to x,y velocities\n        largeParticle.vx = v1nAfter * nx + v1t * tx;\n        largeParticle.vy = v1nAfter * ny + v1t * ty;\n        particle.vx = v2nAfter * nx + v2t * tx;\n        particle.vy = v2nAfter * ny + v2t * ty;\n\n        // Move particles apart to prevent overlap\n        const overlap = largeParticle.radius + particle.radius - distance;\n        const massRatio = m2 / (m1 + m2);\n        const largeMoveRatio = massRatio;\n        const smallMoveRatio = 1 - massRatio;\n\n        // Move particles apart proportional to their masses\n        largeParticle.x += overlap * nx * largeMoveRatio;\n        largeParticle.y += overlap * ny * largeMoveRatio;\n        particle.x -= overlap * nx * smallMoveRatio;\n        particle.y -= overlap * ny * smallMoveRatio;\n      }\n\n      // Occasionally thermostat small particles to maintain temperature\n      if (Math.random() < 0.01) {\n        const vel = maxwellBoltzmannVelocity();\n        particle.vx = vel.vx * 8;  // Scale for visibility\n        particle.vy = vel.vy * 8;  // Scale for visibility\n      }\n\n      // Update small particle display\n      smallParticleElements.filter((_, j) => i === j)\n        .attr(\"cx\", particle.x)\n        .attr(\"cy\", particle.y);\n    });\n\n    // Update large particle position\n    largeParticle.x += largeParticle.vx;\n    largeParticle.y += largeParticle.vy;\n\n    // Bounce large particle off walls\n    if (largeParticle.x < largeParticle.radius || largeParticle.x > width - largeParticle.radius) {\n      largeParticle.vx *= -1;\n      largeParticle.x = Math.max(largeParticle.radius, Math.min(width - largeParticle.radius, largeParticle.x));\n    }\n    if (largeParticle.y < largeParticle.radius || largeParticle.y > height - largeParticle.radius) {\n      largeParticle.vy *= -1;\n      largeParticle.y = Math.max(largeParticle.radius, Math.min(height - largeParticle.radius, largeParticle.y));\n    }\n\n    // Update trail\n    largeParticle.trail.pop();\n    largeParticle.trail.unshift({x: largeParticle.x, y: largeParticle.y});\n\n    // Update large particle display\n    largeParticleElement\n      .attr(\"cx\", largeParticle.x)\n      .attr(\"cy\", largeParticle.y);\n\n    // Update trail display\n    trailElements.data(largeParticle.trail)\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  // Start animation\n  const interval = d3.interval(() => {\n    updateParticles();\n  }, 30);\n\n  // Clean up on invalidation\n  invalidation.then(() => interval.stop());\n\n  return svg.node();\n}\n```\n\n### The Mathematical Model of Brownian Motion\n\nMathematically, Brownian motion is governed by the Langevin equation, which describes the basic equation of motion:\n\n$$m\\frac{d^2\\mathbf{r}}{dt^2} = -\\gamma\\frac{d\\mathbf{r}}{dt} + \\mathbf{F}_\\text{random}(t)$$\n\nwhere:\n\n- $m$ is the particle mass\n- $\\mathbf{r}$ is the position vector\n- $\\gamma$ is the drag coefficient\n- $\\mathbf{F}_\\text{random}(t)$ represents random forces from molecular collisions\n\nIn the overdamped limit ($m=0$ which applies to colloidal particles), inertia becomes negligible and the equation simplifies to:\n\n$$\\frac{d\\mathbf{r}}{dt} = \\sqrt{2D}\\,\\boldsymbol{\\xi}(t)$$\n\nWhere $\\boldsymbol{\\xi}(t)$ is Gaussian white noise with a unit variance and $D$ is the diffusion coefficient, the transport coefficient characterizing diffusive transport.\n\nA key observable in Brownian motion is the mean squared displacement (MSD):\n\n$$\\langle (\\Delta r)^2 \\rangle = 2dDt$$\n\nwith:\n\n- $\\langle (\\Delta r)^2 \\rangle$ is the mean squared displacement\n- $d$ is the number of dimensions (2 in our simulation)\n- $D$ is the diffusion coefficient\n- $t$ is the time elapsed\n\nThe diffusion coefficient $D$ depends on physical properties according to the Einstein-Stokes relation:\n\n$$D = \\frac{k_B T}{6\\pi\\eta R}$$\n\nWhere $k_B$ is Boltzmann's constant, $T$ is temperature, $\\eta$ is fluid viscosity, and $R$ is the particle radius.\n\n### Numerical Implementation\n\nIn our `Colloid` class simulation, we implement the discretized version of the overdamped Langevin equation. For each time step $\\Delta t$, the position update is:\n\n$$\\Delta x = \\sqrt{2D\\Delta t} \\times \\xi$$\n\nWhere $\\Delta x$ is the displacement in one direction, and $\\xi$ is a random number drawn from a normal distribution with mean 0 and variance 1.\n\nThis is implemented directly in the `update()` method of our `Colloid` class:\n\n```python\ndef update(self, dt):\n    self.x.append(self.x[-1] + np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n    self.y.append(self.y[-1] + np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n    return(self.x[-1], self.y[-1])\n```\n\nIn this implementation:\n- `D` is the diffusion coefficient stored as an instance variable\n- `dt` is the time step parameter\n- `np.random.normal` generates the Gaussian random numbers required for the stochastic process\n\n::: {.callout-tip}\nThe choice of time step `dt` is important in our simulation. If too large, it fails to capture the fine details of the motion. If too small, the simulation becomes computationally expensive. The class design allows us to adjust this parameter easily when calling `sim_trajectory()` or `update()`.\n:::\n\n\n```{pyodide}\n#| autorun: false\n\n# some space to test out some of the random numbers\n\n\n\n```\n::: {.callout-note collapse=\"true\"}\n### Advanced Mathematical Details\nThe Brownian motion of a colloidal particle results from collisions with surrounding solvent molecules. These collisions lead to a probability distribution described by:\n\n$$\np(x,\\Delta t)=\\frac{1}{\\sqrt{4\\pi D \\Delta t}}e^{-\\frac{x^2}{4D \\Delta t}}\n$$\n\nwith:\n\n- $D$ is the diffusion coefficient\n- $\\Delta t$ is the time step\n- The variance is $\\sigma^2=2D \\Delta t$\n\nThis distribution emerges from the **central limit theorem**, as shown by Lindenberg and Lévy, when considering many infinitesimally small random steps.\n\nThe evolution of the probability density function $p(x,t)$ is governed by the diffusion equation:\n\n$$\n\\frac{\\partial p}{\\partial t}=D\\frac{\\partial^2 p}{\\partial x^2}\n$$\n\nThis partial differential equation, also known as Fick's second law, describes how the concentration of particles evolves over time due to diffusive processes. The Gaussian distribution above is the fundamental solution (Green's function) of this diffusion equation, representing how an initially localized distribution spreads out over time.\n\nThe connection between the microscopic random motion and the macroscopic diffusion equation was first established by Einstein in his 1905 paper on Brownian motion, providing one of the earliest quantitative links between statistical mechanics and thermodynamics.\n:::\n\n\n## Object-Oriented Implementation\n\n### Why Use a Class?\n\nA class is perfect for this physics simulation because each colloidal particle:\n\n1. Has specific properties\n   - Size (radius)\n   - Current position\n   - Movement history\n   - Diffusion coefficient\n\n2. Follows certain behaviors\n   - Moves randomly (Brownian motion)\n   - Updates its position over time\n   - Keeps track of where it's been\n\n3. Can exist alongside other particles\n   - Many particles can move independently\n   - Each particle keeps track of its own properties\n   - Particles can have different sizes\n\n4. Needs to track its state over time\n   - Remember previous positions\n   - Calculate distances moved\n   - Maintain its own trajectory\n\nThis natural mapping between real particles and code objects makes classes an ideal choice for our simulation.\n\n### Class Design\n\nWe design a `Colloid` class to simulate particles undergoing Brownian motion. Using object-oriented programming makes physical sense here - in the real world, each colloidal particle is an independent object with its own properties that follows the same physical laws as other particles.\n\n#### Class-Level Properties (Shared by All Particles)\nOur `Colloid` class will store information common to all particles:\n\n1. `number`: A counter tracking how many particles we've created\n2. `f = 2.2×10^{-19}`: The physical constant $k_B T/(6\\pi\\eta)$ in m³/s\n   - This combines Boltzmann's constant ($k_B$), temperature ($T$), and fluid viscosity ($\\eta$)\n   - Using this constant simplifies our diffusion calculations\n\n#### Class Methods (Functions Shared by All Particles)\nThe class provides these shared behaviors:\n\n1. `how_many()`: Returns the total count of particles created\n   - Useful for tracking how many particles exist in our simulation\n2. `__str__()`: Returns a human-readable description when we print a particle\n   - Shows the particle's radius and current position\n\n#### Instance Properties (Unique to Each Particle)\nEach individual particle will have its own:\n\n1. `R`: Radius in meters\n2. `x`, `y`: Lists storing position history (starting with initial position)\n3. `index`: Unique ID number for each particle\n4. `D`: Diffusion coefficient calculated as $D = f/R$\n   - From Einstein-Stokes relation: $D = \\frac{k_B T}{6\\pi\\eta R}$\n   - Smaller particles diffuse faster (larger D)\n\n#### Instance Methods (What Each Particle Can Do)\nEach particle object will have these behaviors:\n\n1. `update(dt)`: Performs a single timestep of Brownian motion\n   - Takes a timestep `dt` in seconds\n   - Adds random displacement based on diffusion coefficient\n   - Returns the new position\n\n2. `sim_trajectory(N, dt)`: Simulates a complete trajectory\n   - Generates N steps with timestep dt\n   - Calls `update()` repeatedly to build the trajectory\n\n3. `get_trajectory()`: Returns the particle's movement history as a DataFrame\n   - Convenient for analysis and plotting\n\n4. `get_D()`: Returns the particle's diffusion coefficient\n   - Useful for calculations and verification\n\n\n```{pyodide}\n#| autorun: false\n# Class definition\nclass Colloid:\n\n    # A class variable, counting the number of Colloids\n    number = 0\n    f = 2.2e-19 # this is k_B T/(6 pi eta) in m^3/s\n\n    # constructor\n    def __init__(self,R, x0=0, y0=0):\n        # add initialisation code here\n        self.R=R\n        self.x=[x0]\n        self.y=[y0]\n        Colloid.number=Colloid.number+1\n        self.index=Colloid.number\n        self.D=Colloid.f/self.R\n\n    def get_D(self):\n        return(self.D)\n\n    def sim_trajectory(self,N,dt):\n        for i in range(N):\n            self.update(dt)\n\n    def update(self,dt):\n        self.x.append(self.x[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        self.y.append(self.y[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        return(self.x[-1],self.y[-1])\n\n    def get_trajectory(self):\n        return(pd.DataFrame({'x':self.x,'y':self.y}))\n\n    # class method accessing a class variable\n    @classmethod\n    def how_many(cls):\n        return(Colloid.number)\n\n    # insert something that prints the particle position in a formatted way when printing\n    def __str__(self):\n        return(\"I'm a particle with radius R={0:0.3e} at x={1:0.3e},y={2:0.3e}.\".format(self.R, self.x[-1], self.y[-1]))\n```\n\n::: {.callout-note}\n### Note\n\nNote that the function `sim_trajectory` is actually calling the function `update` of the same object to generate the whole trajectory at once.\n:::\n\n## Simulation and Analysis\n\n### Simulating\n\nWith the help of this Colloid class, we would like to carry out simulations of Brownian motion of multiple particles. The simulations shall\n\n* take n=200 particles\n* have N=200 trajectory points each\n* start all at 0,0\n* particle objects should be stored in a list p_list\n\n```{pyodide}\n#| autorun: false\nN=200 # the number of trajectory points\nn=200 # the number of particles\n\np_list=[]\ndt=0.05\n\n# creating all objects\nfor i in range(n):\n    p_list.append(Colloid(1e-6))\n\n\nfor (index,p) in enumerate(p_list):\n    p.sim_trajectory(N,dt)\n```\n\n```{pyodide}\n#| autorun: false\nprint(p_list[42])\n```\n\n### Plotting the trajectories\n\nThe next step is to plot all the trajectories.\n\n```{pyodide}\n#| autorun: false\n# we take real world diffusion coefficients so scale up the data to avoid nasty exponentials\nscale=1e6\n\nplt.figure(figsize=(4,4))\n\n[plt.plot(np.array(p.x[:])*scale,np.array(p.y[:])*scale,'k-',alpha=0.1,lw=1) for p in p_list]\nplt.xlim(-10,10)\nplt.ylim(-10,10)\nplt.xlabel('x [µm]')\nplt.ylabel('y [µm]')\nplt.tight_layout()\nplt.show()\n```\n\n### Characterizing the Brownian motion\n\nNow that we have a number of trajectories, we can analyze the motion of our Brownian particles.\n\n#### Calculate the particle speed\n\nOne way is to calculate its speed by measuring how far it traveled within a certain time $n\\, dt$, where $dt$ is the timestep of out simulation. We can do that as\n\n\\begin{equation}\nv(n dt) = \\frac{<\\sqrt{(x_{i+n}-x_{i})^2+(y_{i+n}-y_{i})^2}>}{n\\,dt}\n\\end{equation}\n\nThe angular brackets on the top take care of the fact that we can measure the distance traveled within a certain time $n\\, dt$ several times along a trajectory.\n\nThese values can be used to calculate a mean speed. Note that there is not an equal amount of data pairs for all separations available. For $n=1$ there are 5 distances available. For $n=5$, however, only 1. This changes the statistical accuracy of the mean.\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    md=[np.mean(np.sqrt(t.x.diff(i)**2+t.y.diff(i)**2)) for i in range(1,N)]\n    md=md/time\n    plt.plot(time,md,alpha=0.4)\n\nplt.ylabel('speed [m/s]')\nplt.xlabel('time [s]')\nplt.tight_layout()\nplt.show()\n```\n\nThe result of this analysis shows, that each particle has an apparent speed which seems to increase with decreasing time of observation or which decreases with increasing time. This would mean that there is some friction at work, which slows down the particle in time, but this is apparently not true. Also an infinite speed at zero time appears to be unphysical.\nThe correct answer is just that the speed is no good measure to characterize the motion of a Brownian particle.\n\n#### Calculate the particle mean squared displacement\n\nA better way to characterize the motion of a Brownian particle is the mean squared displacement, as we have already mentioned it in previous lectures. We may compare our simulation now to the theoretical prediction, which is\n\n\\begin{equation}\n\\langle \\Delta r^{2}(t)\\rangle=2 d D t\n\\end{equation}\n\nwhere $d$ is the dimension of the random walk, which is $d=2$ in our case.\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    msd=[np.mean(t.x.diff(i).dropna()**2+t.y.diff(i).dropna()**2) for i in range(1,N)]\n    plt.plot(time,msd,alpha=0.4)\n\n\nplt.loglog(time, 4*p_list[0].D*time,'k--',lw=2,label='theory')\nplt.legend()\nplt.xlabel('time [s]')\nplt.ylabel('msd $[m^2/s]$')\nplt.tight_layout()\nplt.show()\n```\n\nThe results show that the mean squared displacement of the individual particles follows *on average* the theoretical predictions of a linear growth in time. That means, we are able to read the diffusion coefficient from the slope of the MSD of the individual particles if recorded in a simulation or an experiment.\n\nYet, each individual MSD is deviating strongly from the theoretical prediction especially at large times. This is due to the fact mentioned earlier that our simulation (or experimental) data only has a limited number of data points, while the theoretical prediction is made for the limit of infinite data points.\n\n\n::: {.callout-warning}\n### Analysis of MSD data\n\nSingle particle tracking, either in the experiment or in numerical simulations can therefore only deliver an estimate of the diffusion coefficient and care should be taken when using the whole MSD to obtain the diffusion coefficient. One typically uses only a short fraction of the whole MSD data at short times.\n:::\n\n## Summary\n\nIn this lecture, we have:\n\n1. Explored the physical principles behind Brownian motion and its mathematical description\n2. Implemented a computational model using object-oriented programming principles\n3. Created a `Colloid` class with properties and methods that simulate realistic particle behavior\n4. Generated and visualized multiple particle trajectories\n5. Analyzed the simulation results using mean squared displacement calculations\n6. Compared our numerical results with theoretical predictions\n\nThis exercise demonstrates how object-oriented programming provides an elegant framework for physics simulations, where the objects in our code naturally represent physical entities in the real world.\n\n## Further Reading\n\n- Einstein, A. (1905). \"On the Movement of Small Particles Suspended in Stationary Liquids Required by the Molecular-Kinetic Theory of Heat\"\n- Berg, H.C. (1993). \"Random Walks in Biology\"\n- Chandrasekhar, S. (1943). \"Stochastic Problems in Physics and Astronomy\"\n- Nelson, E. (2001). \"Dynamical Theories of Brownian Motion\"\n\n",
    "supporting": [
      "02-lecture04_files"
    ],
    "filters": [],
    "includes": {}
  }
}