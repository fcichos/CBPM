{
  "hash": "d59eb1b6946816a5879b813533c73c6b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Brownian Motion\nformat:\n  live-html:\n    toc: true\n    toc-location: right\npyodide:\n  packages:\n    - numpy\n    - matplotlib\n---\n\n\n\n\n\nWe will apply our newly acquired knowledge about classes to simulate Brownian motion. This task aligns perfectly with the principles of object-oriented programming, as each Brownian particle (or colloid) can be represented as an object instantiated from the same class, albeit with different properties. For instance, some particles might be larger while others are smaller. We have already touched on some aspects of this in previous lectures.\n\n\n\n\n```{pyodide}\n#| autorun: true\n#| edit: false\n#| echo: false\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nplt.rcParams.update({'font.size': 12,\n                     'lines.linewidth': 1,\n                     'lines.markersize': 10,\n                     'axes.labelsize': 11,\n                     'xtick.labelsize' : 10,\n                     'ytick.labelsize' : 10,\n                     'xtick.top' : True,\n                     'xtick.direction' : 'in',\n                     'ytick.right' : True,\n                     'ytick.direction' : 'in',})\n```\n\n\n\n\n\n## Brownian Motion\n\n### What is Brownian Motion?\nImagine a dust particle floating in water. If you look at it under a microscope, you'll see it moving in a random, zigzag pattern. This is Brownian motion!\n\n\n### Why Does This Happen?\nWhen we observe Brownian motion, we're seeing the effects of countless molecular collisions. Water isn't just a smooth, continuous fluid - it's made up of countless tiny molecules that are in constant motion. These water molecules are continuously colliding with our particle from all directions. Each individual collision causes the particle to move just a tiny bit, barely noticeable on its own. However, when millions of these tiny collisions happen every second from random directions, they create the distinctive zigzag motion we observe.\n\n::: {#fig_brownian .content-visible when-profile=\"default\"}\n![](img/Brownian Motion.gif){fig-align=\"center\" width=40%}\n\nAnimation of Brownian motion (c) Wikipedia.\n:::\n\n### The Simplified Math Behind It\nWhen our particle moves:\n\n1. Each step is random in direction\n2. The size of each step depends on:\n   - Temperature (warmer = more movement)\n   - Time between steps\n   - A property called the \"diffusion coefficient\" (D)\n\n### How We Can Simulate This?\nIn Python, we can simulate these random steps using random number. These random numbers can be generated with the numpy library. Numpy provides a number of different functions that provide random numbers from different distributions. For Brownian motion, we use a special distribution called the \"normal distribution\".\n\n```python\nstep_size = np.sqrt(2 * D * time_step)\ndx = random_number * step_size  # Random step in x direction\ndy = random_number * step_size  # Random step in y direction\n\nnew_x = old_x + dx\nnew_y = old_y + dy\n```\n\nWhere:\n\n- `D` is how easily the particle moves (diffusion coefficient)\n- `time_step` is how often we update the position\n- `random_number` is chosen from a special \"normal distribution\"\n\n::: {.callout-tip}\nWhen simulating Brownian motion, we use `np.random.normal` to generate random steps following this distribution. The normal distribution is characterized by two parameters: the mean and the standard deviation. The mean is the average value, and the standard deviation is a measure of how spread out the values are. For Brownian motion, we use a standard deviation that depends on the diffusion coefficient and the time step. The standard deviation $\\sigma=\\sqrt{2D \\Delta t}$ determines the typical step size, which we can use as a parameter in the normal distribution.\n:::\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n\n# some space to test out some of the random numbers\n\n\n\n\n```\n\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Advanced Mathematical Details\nThe Brownian motion of a colloidal particle results from collisions with surrounding solvent molecules. These collisions lead to a probability distribution described by:\n\n$$\np(x,\\Delta t)=\\frac{1}{\\sqrt{4\\pi D \\Delta t}}e^{-\\frac{x^2}{4D \\Delta t}}\n$$\n\nwhere:\n- $D$ is the diffusion coefficient\n- $\\Delta t$ is the time step\n- The variance is $\\sigma^2=2D \\Delta t$\n\nThis distribution emerges from the **central limit theorem**, as shown by Lindenberg and Lévy, when considering many infinitesimally small random steps.\n\nThe evolution of the probability density function $p(x,t)$ is governed by the diffusion equation:\n\n$$\n\\frac{\\partial p}{\\partial t}=D\\frac{\\partial^2 p}{\\partial x^2}\n$$\n\nThis partial differential equation, also known as Fick's second law, describes how the concentration of particles evolves over time due to diffusive processes. The Gaussian distribution above is the fundamental solution (Green's function) of this diffusion equation, representing how an initially localized distribution spreads out over time.\n\nThe connection between the microscopic random motion and the macroscopic diffusion equation was first established by Einstein in his 1905 paper on Brownian motion, providing one of the earliest quantitative links between statistical mechanics and thermodynamics.\n:::\n\n\n## Why Use a Class?\n\nA class is perfect for this physics simulation because each colloidal particle:\n\n1. Has specific properties\n   - Size (radius)\n   - Current position\n   - Movement history\n   - Diffusion coefficient\n\n2. Follows certain behaviors\n   - Moves randomly (Brownian motion)\n   - Updates its position over time\n   - Keeps track of where it's been\n\n3. Can exist alongside other particles\n   - Many particles can move independently\n   - Each particle keeps track of its own properties\n   - Particles can have different sizes\n\n4. Needs to track its state over time\n   - Remember previous positions\n   - Calculate distances moved\n   - Maintain its own trajectory\n\nThis natural mapping between real particles and code objects makes classes an ideal choice for our simulation.\n\n## Class Design\n\nLet's design a Python class to simulate colloidal particles undergoing Brownian motion. This object-oriented approach will help us manage multiple particles with different properties and behaviors.\n\n### Class-Level Properties\nThe `Colloid` class will maintain information shared by all particles:\n\n1. A counter for the total number of particles\n2. The physical constant $k_B T/(6\\pi\\eta) = 2.2×10^{-19}$ (combining temperature and fluid properties)\n\n### Class Methods\nThe class will provide these shared functions:\n\n1. `how_many()`: Reports the total number of particles\n2. `__str__`: Creates a readable description of a particle's properties\n\n### Instance Properties\nEach individual particle object will have:\n\n1. Radius (R)\n2. Position history (x and y coordinates)\n3. Unique identifier (index)\n4. Diffusion coefficient ($D = k_B T/(6\\pi\\eta R)$)\n\n### Instance Methods\nEach particle will be able to:\n\n1. `sim_trajectory()`: Generate a complete motion path\n2. `update(dt)`: Calculate one step of Brownian motion\n3. `get_trajectory()`: Return its movement history\n4. `get_D()`: Provide its diffusion coefficient\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Class definition\nclass Colloid:\n\n    # A class variable, counting the number of Colloids\n    number = 0\n    f = 2.2e-19 # this is k_B T/(6 pi eta) in m^3/s\n\n    # constructor\n    def __init__(self,R, x0=0, y0=0):\n        # add initialisation code here\n        self.R=R\n        self.x=[x0]\n        self.y=[y0]\n        Colloid.number=Colloid.number+1\n        self.index=Colloid.number\n        self.D=Colloid.f/self.R\n\n    def get_D(self):\n        return(self.D)\n\n    def sim_trajectory(self,N,dt):\n        for i in range(N):\n            self.update(dt)\n\n    def update(self,dt):\n        self.x.append(self.x[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        self.y.append(self.y[-1]+np.random.normal(0.0, np.sqrt(2*self.D*dt)))\n        return(self.x[-1],self.y[-1])\n\n    def get_trajectory(self):\n        return(pd.DataFrame({'x':self.x,'y':self.y}))\n\n    # class method accessing a class variable\n    @classmethod\n    def how_many(cls):\n        return(Colloid.number)\n\n    # insert something that prints the particle position in a formatted way when printing\n    def __str__(self):\n        return(\"I'm a particle with radius R={0:0.3e} at x={1:0.3e},y={2:0.3e}.\".format(self.R, self.x[-1], self.y[-1]))\n```\n\n\n\n\n::: {.callout-note}\n## Note\n\nNote that the function `sim_trajectory` is actually calling the function `update` of the same object to generate the whole trajectory at once.\n:::\n\n## Simulating\n\nWith the help of this Colloid class, we would like to carry out simulations of Brownian motion of multiple particles. The simulations shall\n\n* take n=200 particles\n* have N=200 trajectory points each\n* start all at 0,0\n* particle objects should be stored in a list p_list\n\n\n\n\n```{pyodide}\n#| autorun: false\nN=200 # the number of trajectory points\nn=200 # the number of particles\n\np_list=[]\ndt=0.05\n\n# creating all objects\nfor i in range(n):\n    p_list.append(Colloid(1e-6))\n\n\nfor (index,p) in enumerate(p_list):\n    p.sim_trajectory(N,dt)\n```\n\n```{pyodide}\n#| autorun: false\nprint(p_list[42])\n```\n\n\n\n\n## Plotting the trajectories\n\nThe next step is to plot all the trajectories.\n\n\n\n\n```{pyodide}\n#| autorun: false\n# we take real world diffusion coefficients so scale up the data to avoid nasty exponentials\nscale=1e6\n\nplt.figure(figsize=(4,4))\n\n[plt.plot(np.array(p.x[:])*scale,np.array(p.y[:])*scale,'k-',alpha=0.1,lw=1) for p in p_list]\nplt.xlim(-10,10)\nplt.ylim(-10,10)\nplt.xlabel('x [µm]')\nplt.ylabel('y [µm]')\nplt.tight_layout()\nplt.show()\n```\n\n\n\n\n## Characterizing the Brownian motion\n\nNow that we have a number of trajectories, we can analyze the motion of our Brownian particles.\n\n### Calculate the particle speed\n\nOne way is to calculate its speed by measuring how far it traveled within a certain time $n\\, dt$, where $dt$ is the timestep of out simulation. We can do that as\n\n\\begin{equation}\nv(n dt) = \\frac{<\\sqrt{(x_{i+n}-x_{i})^2+(y_{i+n}-y_{i})^2}>}{n\\,dt}\n\\end{equation}\n\nThe angular brackets on the top take care of the fact that we can measure the distance traveled within a certain time $n\\, dt$ several times along a trajectory.\n\nThese values can be used to calculate a mean speed. Note that there is not an equal amount of data pairs for all separations available. For $n=1$ there are 5 distances available. For $n=5$, however, only 1. This changes the statistical accuracy of the mean.\n\n\n\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    md=[np.mean(np.sqrt(t.x.diff(i)**2+t.y.diff(i)**2)) for i in range(1,N)]\n    md=md/time\n    plt.plot(time,md,alpha=0.4)\n\nplt.ylabel('speed [m/s]')\nplt.xlabel('time [s]')\nplt.tight_layout()\nplt.show()\n```\n\n\n\n\nThe result of this analysis shows, that each particle has an apparent speed which seems to increase with decreasing time of observation or which decreases with increasing time. This would mean that there is some friction at work, which slows down the particle in time, but this is apparently not true. Also an infinite speed at zero time appears to be unphysical.\nThe correct answer is just that the speed is no good measure to characterize the motion of a Brownian particle.\n\n### Calculate the particle mean squared displacement\n\nA better way to characterize the motion of a Brownian particle is the mean squared displacement, as we have already mentioned it in previous lectures. We may compare our simulation now to the theoretical prediction, which is\n\n\\begin{equation}\n\\langle \\Delta r^{2}(t)\\rangle=2 d D t\n\\end{equation}\n\nwhere $d$ is the dimension of the random walk, which is $d=2$ in our case.\n\n\n\n\n```{pyodide}\n#| autorun: false\ntime=np.array(range(1,N))*dt\n\nplt.figure(figsize=(4,4))\nfor j in range(100):\n    t=p_list[j].get_trajectory()\n    msd=[np.mean(t.x.diff(i).dropna()**2+t.y.diff(i).dropna()**2) for i in range(1,N)]\n    plt.plot(time,msd,alpha=0.4)\n\n\nplt.plot(time, 4*p_list[0].D*time,'k--',lw=2,label='theory')\nplt.legend()\nplt.xlabel('time [s]')\nplt.ylabel('msd $[m^2/s]$')\nplt.tight_layout()\nplt.show()\n```\n\n\n\n\nThe results show that the mean squared displacement of the individual particles follows *on average* the theoretical predictions of a linear growth in time. That means, we are able to read the diffusion coefficient from the slope of the MSD of the individual particles if recorded in a simulation or an experiment.\n\nYet, each individual MSD is deviating strongly from the theoretical prediction especially at large times. This is due to the fact mentioned earlier that our simulation (or experimental) data only has a limited number of data points, while the theoretical prediction is made for the limit of infinite data points.\n\n\n::: {.callout-warning}\n## Analysis of MSD data\n\nSingle particle tracking, either in the experiment or in numerical simulations can therefore only deliver an estimate of the diffusion coefficient and care should be taken when using the whole MSD to obtain the diffusion coefficient. One typically uses only a short fraction of the whole MSD data at short times.\n:::\n\n",
    "supporting": [
      "2_brownian_motion_files"
    ],
    "filters": [],
    "includes": {}
  }
}