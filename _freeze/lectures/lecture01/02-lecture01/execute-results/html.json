{
  "hash": "7f5e61e98e1820f0f85c72156529edb5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Variables & Numbers\"\nformat:\n  live-html:\n    toc: true\n    toc-location: right\n    highlight-style: github\n    code-fold: show\n    code-tools: true\n    css: ../../assets/css/custom.css\npyodide:\n  autorun: false\n  packages:\n    - numpy\n---\n\n\n\n\n## Variables in Python\n\n### Symbol Names\n\n::: {.content-hidden when-format=\"reavealjs\"}\nVariable names in Python can include alphanumerical characters `a-z`, `A-Z`, `0-9`, and the special character `_`. Normal variable names must start with a letter or an underscore. By convention, variable names typically start with a lower-case letter, while Class names start with a capital letter and internal variables start with an underscore.\n:::\n\n::: {.callout-warning title=\"Reserved Keywords\"}\nPython has keywords that cannot be used as variable names. The most common ones you'll encounter in physics programming are:\n\n`if`, `else`, `for`, `while`, `return`, `and`, `or`, `lambda`\n\nNote that `lambda` is particularly relevant as it could naturally appear in physics code, but since it's reserved for anonymous functions in Python, it cannot be used as a variable name.\n:::\n\n### Variable Assignment\n\nThe assignment operator in Python is `=`. Python is a dynamically typed language, so we do not need to specify the type of a variable when we create one.\n\nAssigning a value to a new variable creates the variable:\n\n\n\n\n```{pyodide}\n#| autorun: false\n# variable assignments\nx = 1.0\nmy_favorite_variable = 12.2\nx\n```\n\n\n\n\nAlthough not explicitly specified, a variable does have a type associated with it (e.g., integer, float, string).\nThe type is derived from the value that was assigned to it. To determine the type of a variable, we can use the `type` function.\n\n\n\n\n```{pyodide}\n#| autorun: false\ntype(x)\n```\n\n\n\n\nIf we assign a new value to a variable, its type can change.\n\n\n\n\n```{pyodide}\n#| autorun: false\nx = 1\n```\n\n```{pyodide}\n#| autorun: false\ntype(x)\n```\n\n\n\n\nIf we try to use a variable that has not yet been defined, we get a `NameError` error.\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#print(g)\n```\n\n\n\n\n## Number Types\n\nPython supports various number types, including integers, floating-point numbers, and complex numbers. These are some of the basic building blocks of doing arithmetic in any programming language. We will discuss each of these types in more detail.\n\n### Comparison of Number Types\n\n::: {.table-responsive}\n| Type | Example | Description | Limits | Use Cases |\n|:-----|:--------|:------------|:-------|:----------|\n| **int** | `42` | Whole numbers | Unlimited precision (bounded by available memory) | Counting, indexing |\n| **float** | `3.14159` | Decimal numbers | Typically Â±1.8e308 with 15-17 digits of precision (64-bit) | Scientific calculations, prices |\n| **complex** | `2 + 3j` | Numbers with real and imaginary parts | Same as float for both real and imaginary parts | Signal processing, electrical engineering |\n| **bool** | `True` / `False` | Logical values | Only two values: True (1) and False (0) | Conditional operations, flags |\n:::\n\n\n\n### Examples\n\n::: {.panel-tabset}\n### Integers\n\n**Integer Representation:**  Integers are whole numbers without a decimal point.\n\n\n\n\n\n```{pyodide}\n#| autorun: false\nx = 1\ntype(x)\n```\n\n\n\n\n**Binary, Octal, and Hexadecimal:** Integers can be represented in different bases:\n\n\n\n\n```{pyodide}\n#| autorun: false\n0b1010111110  # Binary\n0x0F          # Hexadecimal\n```\n\n\n\n\n### Floating Point Numbers\n\n**Floating Point Representation:** Numbers with a decimal point are treated as floating-point values.\n\n\n\n\n```{pyodide}\n#| autorun: false\nx = 3.141\ntype(x)\n```\n\n\n\n\n**Maximum Float Value:** Python handles large floats, converting them to infinity if they exceed the maximum representable value.\n\n\n\n\n```{pyodide}\n#| autorun: false\n1.7976931348623157e+308 * 2  # Output: inf\n```\n\n\n\n\n### Complex Numbers\n\n**Complex Number Representation:** Complex numbers have a real and an imaginary part.\n\n\n\n\n```{pyodide}\n#| autorun: false\nc = 2 + 4j\ntype(c)\n```\n\n\n\n\n- **Accessors for Complex Numbers:**\n  - `c.real`: Real part of the complex number.\n  - `c.imag`: Imaginary part of the complex number.\n\n\n\n\n```{pyodide}\n#| autorun: false\nprint(c.real)\nprint(c.imag)\n```\n\n\n\n\n**Complex Conjugate:** Use the `.conjugate()` method to get the complex conjugate.\n\n\n\n\n```{pyodide}\n#| autorun: false\nc = c.conjugate()\nprint(c)\n```\n\n\n\n:::\n\n\n## Operators\n\nPython provides a variety of operators for performing operations on variables and values. Here we'll cover the most common operators used in scientific programming.\n\n::: {.panel-tabset}\n### Arithmetic Operators\n\nThese operators perform basic mathematical operations:\n\n| Operator | Name | Example | Result |\n|----------|------|---------|--------|\n| `+` | Addition | `5 + 3` | 8 |\n| `-` | Subtraction | `5 - 3` | 2 |\n| `*` | Multiplication | `5 * 3` | 15 |\n| `/` | Division | `5 / 3` | 1.6666... |\n| `//` | Floor Division | `5 // 3` | 1 |\n| `%` | Modulus (remainder) | `5 % 3` | 2 |\n| `**` | Exponentiation | `5 ** 3` | 125 |\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Examples of arithmetic operators\nprint(f\"Addition: 5 + 3 = {5 + 3}\")\nprint(f\"Division: 5 / 3 = {5 / 3}\")\nprint(f\"Floor Division: 5 // 3 = {5 // 3}\")\nprint(f\"Exponentiation: 5 ** 3 = {5 ** 3}\")\n```\n\n\n\n\n### Comparison Operators\n\nThese operators are used to compare values:\n\n| Operator | Description | Example |\n|----------|-------------|---------|\n| `==` | Equal to | `x == y` |\n| `!=` | Not equal to | `x != y` |\n| `>` | Greater than | `x > y` |\n| `<` | Less than | `x < y` |\n| `>=` | Greater than or equal to | `x >= y` |\n| `<=` | Less than or equal to | `x <= y` |\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Examples of comparison operators\nx, y = 5, 3\nprint(f\"x = {x}, y = {y}\")\nprint(f\"x == y: {x == y}\")\nprint(f\"x > y: {x > y}\")\nprint(f\"x <= y: {x <= y}\")\n```\n\n\n\n\n### Logical Operators\n\nUsed to combine conditional statements:\n\n| Operator | Description | Example |\n|----------|-------------|---------|\n| `and` | Returns True if both statements are true | `x > 0 and x < 10` |\n| `or` | Returns True if one of the statements is true | `x < 0 or x > 10` |\n| `not` | Reverses the result, returns False if the result is true | `not(x > 0 and x < 10)` |\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Examples of logical operators\nx = 7\nprint(f\"x = {x}\")\nprint(f\"x > 0 and x < 10: {x > 0 and x < 10}\")\nprint(f\"x < 0 or x > 10: {x < 0 or x > 10}\")\nprint(f\"not(x > 0): {not(x > 0)}\")\n```\n\n\n\n\n### Assignment Operators\n\nPython provides shorthand operators for updating variables:\n\n| Operator | Example | Equivalent to |\n|----------|---------|---------------|\n| `=` | `x = 5` | `x = 5` |\n| `+=` | `x += 3` | `x = x + 3` |\n| `-=` | `x -= 3` | `x = x - 3` |\n| `*=` | `x *= 3` | `x = x * 3` |\n| `/=` | `x /= 3` | `x = x / 3` |\n| `//=` | `x //= 3` | `x = x // 3` |\n| `%=` | `x %= 3` | `x = x % 3` |\n| `**=` | `x **= 3` | `x = x ** 3` |\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Examples of assignment operators\nx = 10\nprint(f\"Initial x: {x}\")\n\nx += 5\nprint(f\"After x += 5: {x}\")\n\nx *= 2\nprint(f\"After x *= 2: {x}\")\n```\n\n\n\n\n::: {.callout-tip title=\"Operator Precedence\" collapse=true}\nPython follows the standard mathematical order of operations (PEMDAS):\n\n1. Parentheses\n2. Exponentiation (`**`)\n3. Multiplication and Division (`*`, `/`, `//`, `%`)\n4. Addition and Subtraction (`+`, `-`)\n\nWhen operators have the same precedence, they are evaluated from left to right.\n\n\n\n\n```{pyodide}\n#| autorun: false\n# Operator precedence example\nresult = 2 + 3 * 4 ** 2\nprint(f\"2 + 3 * 4 ** 2 = {result}\")  # 2 + 3 * 16 = 2 + 48 = 50\n\n# Using parentheses to change precedence\nresult = (2 + 3) * 4 ** 2\nprint(f\"(2 + 3) * 4 ** 2 = {result}\")  # 5 * 16 = 80\n```\n\n\n\n:::\n:::\n\n",
    "supporting": [
      "02-lecture01_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}