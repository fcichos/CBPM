{
  "hash": "e4adb754dfe1839bcdfde87ca691407e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Step-by-Step Development of a Molecular Dynamics Simulation\"\nauthor: \"Frank Cichos\"\nformat:\n  live-html:\n    toc: true\n    toc-location: right\npyodide:\n  autorun: true\n  packages:\n    - matplotlib\n    - numpy\n---\n\n\n```{pyodide}\n#| autorun: true\n#| edit: false\n#| echo: false\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 8,\n                     'lines.linewidth': 1,\n                     'lines.markersize': 10,\n                     'axes.labelsize': 10,\n                     'axes.titlesize': 10,\n                     'xtick.labelsize' : 10,\n                     'ytick.labelsize' : 10,\n                     'xtick.top' : True,\n                     'xtick.direction' : 'in',\n                     'ytick.right' : True,\n                     'ytick.direction' : 'in',})\n\ndef get_size(w,h):\n    return((w/2.54,h/2.54))\nclass Atom:\n    def __init__(self, atom_id, atom_type, position, velocity=None, mass=None):\n        self.id = atom_id\n        self.type = atom_type\n        self.position = position\n        self.velocity = velocity if velocity is not None else np.random.randn(2)*20\n        self.mass = mass\n        self.force = np.zeros(2)\n\n\n    def add_force(self, force):\n        \"\"\"Add force contribution to total force on atom\"\"\"\n        self.force += force\n\n    def reset_force(self):\n        \"\"\"Reset force to zero at start of each step\"\"\"\n        self.force = np.zeros(2)\n\n    def update_position(self, dt):\n        \"\"\"First step of velocity Verlet: update position\"\"\"\n        self.position += self.velocity * dt + 0.5 * (self.force/self.mass) * dt**2\n\n    def update_velocity(self, dt, new_force):\n        \"\"\"Second step of velocity Verlet: update velocity using average force\"\"\"\n        self.velocity += 0.5 * (new_force + self.force)/self.mass * dt\n        self.force = new_force\n\n    def apply_periodic_boundaries(self, box_size):\n            \"\"\"Apply periodic boundary conditions\"\"\"\n            self.position = self.position % box_size\n```\n\nIn the last seminar we have defined the class `Atom` that represents an atom in the simulation. This time, we would like to a force field to the simulation. We will use for out simulations the Lennard-Jones potential that we have had a look at initiall. We will implement this force field in a class `ForceField` that will contain the parameters of the force field and the methods to calculate the forces between the atoms.\n\n## The ForceField Class\n\nThe force field is a class that contains the parameters of the force field and the methods to calculate the forces between the atoms. The class `ForceField` has the following attributes:\n\n- `sigma`: The parameter sigma of the Lennard-Jones potential\n- `epsilon`: The parameter epsilon of the Lennard-Jones potential\n\nThese parameters are specific for each atom type. We will store these parameters in a dictionary where the keys are the atom types and the values are dictionaries containing the parameters sigma and epsilon. The class `ForceField` also contains the box size of the simulation. This is needed to apply periodic boundary conditions.\n\n\n```python\nclass ForceField:\n    def __init__(self):\n        self.parameters = {\n            'C': {'epsilon': 1.615, 'sigma': 1.36},\n            'H': {'epsilon': 1.0, 'sigma': 1.0 },\n            'O': {'epsilon': 1.846, 'sigma': 3.0},\n        }\n        self.box_size = None  # Will be set when initializing the simulation\n```\n\n\nYou will have certainly noticed that the parameters I defined do not correspond to the real values of the Lennard-Jones potential. Remember that the values for the hydrogen atom are typically\n\n- $\\sigma \\approx 2.38$ Ã… = $2.38 \\times 10^{-10}$ meters\n- $\\epsilon \\approx 0.0167$ kcal/mol = $1.16 \\times 10^{-21}$ joules\n\nThese are all small numbers and we will use larger values to make the simulation more stable. Actually, the Lenard-Jones potential provides a natural length and energy scale for the simulation. The length scale is the parameter $\\sigma$ and the energy scale is the parameter $\\epsilon$. We can therefore set $\\sigma_{LJ}=1$ and $\\epsilon_{LJ}=1$ and scale all other parameters accordingly. This is a common practice in molecular dynamics simulations.\n\nDue to this rescaling energy, temperature and time units are also not the same as in the real world. We will use the following units:\n\n- Energy: $\\epsilon_{LJ} = \\epsilon_{H}/\\epsilon_{H} = 1$\n- Length: $\\sigma_{LJ} = 1$\n- Mass: $m_{LJ} = 1$\n\nThis means now that all energies, for example, have to be scales by \\epsilon_{H} also the thermal energy. As thermal energy is related to temperature, then the temperature of the Lennard-Jones system\n\n$$\nT_{LJ}=\\frac{k_B T}{\\epsilon_{LJ}}\n$$\n\nwhich is, in the case of using the hydrogen energy scale, $T_{LJ}=3.571$. for $T=300\\, K$. For the time scale, we have to consider the mass of the hydrogen atom. The time scale is given by\n\n$$\nt_{LJ}=\\frac{t}{\\sigma}\\sqrt{\\frac{\\epsilon}{m_{H}}}\n$$\n\nThus a time unit of $1\\, fs$ corresponds to $t_{LJ}=0.099$. Thus using a timestep of 0.01 in reduced units would correspond to a real world timestep of just 1 fs.\nThe table below shows the conversion factors for the different units. Simulating a Lennard-Jones system in reduced units therefore allows you to rescale to a real systems with the help of these conversion factors.\n\n$$\n\\begin{array}{c|c}\n\\hline \\mathrm{r}^* & \\mathrm{r} \\sigma^{-1} \\\\\n\\hline \\mathrm{~m}^* & \\mathrm{mM}^{-1} \\\\\n\\hline \\mathrm{t}^* & \\mathrm{t} \\sigma^{-1} \\sqrt{\\epsilon / M} \\\\\n\\hline \\mathrm{~T}^* & \\mathrm{k}_B T \\epsilon^{-1} \\\\\n\\hline \\mathrm{E}^* & \\mathrm{E} \\epsilon^{-1} \\\\\n\\hline \\mathrm{~F}^* & \\mathrm{~F} \\sigma \\epsilon^{-1} \\\\\n\\hline \\mathrm{P}^* & \\mathrm{P} \\sigma^3 \\epsilon^{-1} \\\\\n\\hline \\mathrm{v}^* & \\mathrm{v} \\sqrt{M / \\epsilon} \\\\\n\\hline \\rho^* & \\mathrm{~N} \\sigma^3 V^{-1} \\\\\n\\hline\n\\end{array}\n$$\n\n\n### Apply mixing rules when needed\n#### `get_pair_parameters`\n\nWhen we looked at the Lennard-Jones potential we realized that it reflects the pair interaction between the same atoms. However, in a molecular dynamics simulation, we have different atoms interacting with each other. We need to define the parameters of the interaction between different atoms. This is done using mixing rules. The most common mixing rule is the Lorentz-Berthelot mixing rule. The parameters of the interaction between two different atoms are calculated as follows:\n\n```python\ndef get_pair_parameters(self, type1, type2):\n    # Apply mixing rules when needed\n    eps1 = self.parameters[type1]['epsilon']\n    eps2 = self.parameters[type2]['epsilon']\n    sig1 = self.parameters[type1]['sigma']\n    sig2 = self.parameters[type2]['sigma']\n\n    # Lorentz-Berthelot mixing rules\n    epsilon = np.sqrt(eps1 * eps2)\n    sigma = (sig1 + sig2) / 2\n\n    return epsilon, sigma\n```\n\nWe therefore introduce the method `get_pair_parameters` that calculates the parameters of the Lennard-Jones potential between two different atoms. The method takes the atom types as arguments and returns the parameters epsilon and sigma of the Lennard-Jones potential between these two atoms. The method applies the Lorentz-Berthelot mixing rules to calculate the parameters. The method returns the parameters epsilon and sigma of the Lennard-Jones potential between the two atoms.\n\n\n### Apply minimum image convention\n#### `minimum_image_distance`\n\nSimilarly, we already realized that using a finite box size requires to introduce boundary conditions. We decided that periodic boundary conditions are actually most convinient. However, this is introducing a new problem. When we calculate the distance between two atoms, we have to consider the minimum image distance. This means that we have to consider the distance between two atoms in the nearest image. This is done by applying the minimum image convention. The method `minimum_image_distance` calculates the minimum image distance between two positions. The method takes the positions of the two atoms as arguments and returns the minimum image distance between the two positions. The method applies the minimum image convention to calculate the minimum image distance.\n\n```python\ndef minimum_image_distance(self, pos1, pos2):\n    \"\"\"Calculate minimum image distance between two positions\"\"\"\n    delta = pos1 - pos2\n    # Apply minimum image convention\n    delta = delta - self.box_size * np.round(delta / self.box_size)\n    return delta\n```\n\n### Calculate the Lennard-Jones force between two atoms\n#### `calculate_lj_force`\n\nFinally we can calculate the Lennard-Jones force between two atoms. The method `calculate_lj_force` calculates the Lennard-Jones force between two atoms. The method takes the two atoms as arguments and returns the force between the two atoms. The method calculates the Lennard-Jones force between the two atoms using the Lennard-Jones potential. The method returns the force between the two atoms.\n\n```python\ndef calculate_lj_force(self, atom1, atom2):\n    epsilon, sigma = self.get_pair_parameters(atom1.type, atom2.type)\n    r = self.minimum_image_distance(atom1.position, atom2.position)\n    r_mag = np.linalg.norm(r)\n\n    # Add cutoff distance for stability\n    if r_mag > 2.5*sigma:\n        return np.zeros(2)\n\n    force_mag = 24 * epsilon * (\n        2 * (sigma/r_mag)**13\n        - (sigma/r_mag)**7\n    )\n    force = force_mag * r/r_mag\n    return force\n```\n\n\nWith these parts we have now a complete force field class which we can add to our simulation code.\n\n\n::: {.callout-note collapse=\"true\"}\n#### Complete ForceField class\n\n```python\nclass ForceField:\n    def __init__(self):\n        self.parameters = {\n            'C': {'epsilon': 1.615, 'sigma': 1.36},\n            'H': {'epsilon': 1.0, 'sigma': 1.0 },\n            'O': {'epsilon': 1.846, 'sigma': 3.0},\n        }\n        self.box_size = None  # Will be set when initializing the simulation\n\n    def get_pair_parameters(self, type1, type2):\n        # Apply mixing rules when needed\n        eps1 = self.parameters[type1]['epsilon']\n        eps2 = self.parameters[type2]['epsilon']\n        sig1 = self.parameters[type1]['sigma']\n        sig2 = self.parameters[type2]['sigma']\n\n        # Lorentz-Berthelot mixing rules\n        epsilon = np.sqrt(eps1 * eps2)\n        sigma = (sig1 + sig2) / 2\n\n        return epsilon, sigma\n\n    def minimum_image_distance(self, pos1, pos2):\n        \"\"\"Calculate minimum image distance between two positions\"\"\"\n        delta = pos1 - pos2\n        # Apply minimum image convention\n        delta = delta - self.box_size * np.round(delta / self.box_size)\n        return delta\n\n    def calculate_lj_force(self, atom1, atom2):\n        epsilon, sigma = self.get_pair_parameters(atom1.type, atom2.type)\n        r = self.minimum_image_distance(atom1.position, atom2.position)\n        r_mag = np.linalg.norm(r)\n\n        # Add cutoff distance for stability\n        if r_mag > 2.5*sigma:\n            return np.zeros(2)\n\n        force_mag = 24 * epsilon * (\n            2 * (sigma/r_mag)**13\n            - (sigma/r_mag)**7\n        )\n        force = force_mag * r/r_mag\n        return force\n```\n:::\n\n\n## MD Simulation Class\n\nThe last thing we need to do is to implement the MD simulation class. This class will be responsible for running the simulation. It is the controller of the simulation, who coordinates everything. By keeping this in a class you may even run several simulations simultaneously. This is not the case here, but it is a good practice to keep the simulation in a class.\n\n\n### `MDSimulation` class constructor\n\nThis is just the constructor of the MD Simulation class. It takes the atoms, the force field, the timestep, and the box size as input. It initializes the simulation with the given parameters and sets the initial energy of the system to None. It also initializes an empty list to store the energy history of the system. The latter ones are not used for the moment but could be important later.\n\n```python\nclass MDSimulation:\n    def __init__(self, atoms, forcefield, timestep, box_size):\n        self.atoms = atoms\n        self.forcefield = forcefield\n        self.forcefield.box_size = box_size  # Set box size in forcefield\n        self.timestep = timestep\n        self.box_size = np.array(box_size)\n        self.initial_energy = None\n        self.energy_history = []\n\n```\n\n\n### `calculate_forces` method\n\nThe `calculate_forces` method calculates the forces between all pairs of atoms in the system. It first resets all forces on the atoms to zero. Then, it calculates the forces between all pairs of atoms using the Lennard-Jones force calculation from the force field class. The method updates the forces on the atoms accordingly. The method does not return anything.\n\n```python\n    def calculate_forces(self):\n        # Reset all forces\n        for atom in self.atoms:\n            atom.reset_force()\n\n        # Calculate forces between all pairs\n        for i, atom1 in enumerate(self.atoms):\n            for atom2 in self.atoms[i+1:]:\n                force = self.forcefield.calculate_lj_force(atom1, atom2)\n                atom1.add_force(force)\n                atom2.add_force(-force)  # Newton's third law\n```\n\n\n### `update_positions_and_velocities` method\n\nThe `update_positions_and_velocities` method does exactly what its name says. It first of all updates the positions by calling the specific method of the atom. Then it is applying periodic boundary conditions. After that, it stores the current forces for the velocity update. Then it recalculates the forces with the new positions. Finally, it updates the velocities using the average of the old and new forces. The method does not return anything.\n\n```python\n    def update_positions_and_velocities(self):\n        # First step: Update positions using current forces\n        for atom in self.atoms:\n            atom.update_position(self.timestep)\n            # Apply periodic boundary conditions\n            atom.apply_periodic_boundaries(self.box_size)\n\n        # Store current forces for velocity update\n        old_forces = {atom.id: atom.force.copy() for atom in self.atoms}\n\n        # Recalculate forces with new positions\n        self.calculate_forces()\n\n        # Second step: Update velocities using average of old and new forces\n        for atom in self.atoms:\n            atom.update_velocity(self.timestep, atom.force)\n```\n\nWith these methods, we have a complete simulation class that can run a molecular dynamics simulation for a given number of steps. The simulation class will keep track of the energy of the system at each step, which can be used to analyze the behavior of the system over time.\n\n::: {.callout-note collapse=true}\n### Complete MDSimulation class\n\n::: {#8086c4b4 .cell execution_count=1}\n``` {.python .cell-code}\nclass MDSimulation:\n    def __init__(self, atoms, forcefield, timestep, box_size):\n        self.atoms = atoms\n        self.forcefield = forcefield\n        self.forcefield.box_size = box_size  # Set box size in forcefield\n        self.timestep = timestep\n        self.box_size = np.array(box_size)\n        self.initial_energy = None\n        self.energy_history = []\n\n\n    def calculate_forces(self):\n        # Reset all forces\n        for atom in self.atoms:\n            atom.reset_force()\n\n        # Calculate forces between all pairs\n        for i, atom1 in enumerate(self.atoms):\n            for atom2 in self.atoms[i+1:]:\n                force = self.forcefield.calculate_lj_force(atom1, atom2)\n                atom1.add_force(force)\n                atom2.add_force(-force)  # Newton's third law\n\n    def update_positions_and_velocities(self):\n        # First step: Update positions using current forces\n        for atom in self.atoms:\n            atom.update_position(self.timestep)\n            # Apply periodic boundary conditions\n            atom.apply_periodic_boundaries(self.box_size)\n\n        # Store current forces for velocity update\n        old_forces = {atom.id: atom.force.copy() for atom in self.atoms}\n\n        # Recalculate forces with new positions\n        self.calculate_forces()\n\n        # Second step: Update velocities using average of old and new forces\n        for atom in self.atoms:\n            atom.update_velocity(self.timestep, atom.force)\n```\n:::\n\n\n:::\n\nNow we have the atom class, the force field class, and the simulation class. We can use these classes to run a molecular dynamics simulation of a simple Lennard-Jones system.\nIn the next seminar, we still have to find a way to\n\n- initialize the positions of the atoms in an appropriate way\n- to provide them with a velocity distribution that matches the temperature of the system\n- to run the simulation and keep the temperature constant\n- to trace the energy in the system over time\n\n",
    "supporting": [
      "md4_files"
    ],
    "filters": [],
    "includes": {}
  }
}