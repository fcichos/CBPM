{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "755eb2a7",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Variables & Numbers\"\n",
    "format:\n",
    "  live-html:\n",
    "    toc: true\n",
    "    toc-location: right\n",
    "    highlight-style: github\n",
    "    code-fold: show\n",
    "    code-tools: true\n",
    "    css: ../../assets/custom.css\n",
    "pyodide:\n",
    "  autorun: false\n",
    "  packages:\n",
    "    - numpy\n",
    "---\n",
    "\n",
    "\n",
    "## Variables in Python\n",
    "\n",
    "### Symbol Names\n",
    "\n",
    "::: {.content-hidden when-format=\"reavealjs\"}\n",
    "Variable names in Python can include alphanumerical characters `a-z`, `A-Z`, `0-9`, and the special character `_`. Normal variable names must start with a letter or an underscore. By convention, variable names typically start with a lower-case letter, while Class names start with a capital letter and internal variables start with an underscore.\n",
    ":::\n",
    "\n",
    "::: {.callout-warning title=\"Reserved Keywords\"}\n",
    "Python has keywords that cannot be used as variable names. The most common ones you'll encounter in physics programming are:\n",
    "\n",
    "`if`, `else`, `for`, `while`, `return`, `and`, `or`, `lambda`\n",
    "\n",
    "Note that `lambda` is particularly relevant as it could naturally appear in physics code, but since it's reserved for anonymous functions in Python, it cannot be used as a variable name.\n",
    ":::\n",
    "\n",
    "### Variable Assignment\n",
    "\n",
    "The assignment operator in Python is `=`. Python is a dynamically typed language, so we do not need to specify the type of a variable when we create one.\n",
    "\n",
    "Assigning a value to a new variable creates the variable:\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# variable assignments\n",
    "x = 1.0\n",
    "my_favorite_variable = 12.2\n",
    "x\n",
    "```\n",
    "\n",
    "\n",
    "Although not explicitly specified, a variable does have a type associated with it (e.g., integer, float, string).\n",
    "The type is derived from the value that was assigned to it. To determine the type of a variable, we can use the `type` function.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "type(x)\n",
    "```\n",
    "\n",
    "\n",
    "If we assign a new value to a variable, its type can change.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "x = 1\n",
    "```\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "type(x)\n",
    "```\n",
    "\n",
    "\n",
    "If we try to use a variable that has not yet been defined, we get a `NameError` error.\n",
    "\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "#print(g)\n",
    "```\n",
    "\n",
    "\n",
    "## Number Types\n",
    "\n",
    "Python supports various number types, including integers, floating-point numbers, and complex numbers. These are some of the basic building blocks of doing arithmetic in any programming language. We will discuss each of these types in more detail.\n",
    "\n",
    "### Comparison of Number Types\n",
    "\n",
    "::: {.table-responsive}\n",
    "| Type | Example | Description | Limits | Use Cases |\n",
    "|:-----|:--------|:------------|:-------|:----------|\n",
    "| **int** | `42` | Whole numbers | Unlimited precision (bounded by available memory) | Counting, indexing |\n",
    "| **float** | `3.14159` | Decimal numbers | Typically Â±1.8e308 with 15-17 digits of precision (64-bit) | Scientific calculations, prices |\n",
    "| **complex** | `2 + 3j` | Numbers with real and imaginary parts | Same as float for both real and imaginary parts | Signal processing, electrical engineering |\n",
    "| **bool** | `True` / `False` | Logical values | Only two values: True (1) and False (0) | Conditional operations, flags |\n",
    ":::\n",
    "\n",
    "\n",
    "\n",
    "### Examples\n",
    "\n",
    "::: {.panel-tabset}\n",
    "### Integers\n",
    "\n",
    "**Integer Representation:**  Integers are whole numbers without a decimal point.\n",
    "\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "x = 1\n",
    "type(x)\n",
    "```\n",
    "\n",
    "\n",
    "**Binary, Octal, and Hexadecimal:** Integers can be represented in different bases:\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "0b1010111110  # Binary\n",
    "0x0F          # Hexadecimal\n",
    "```\n",
    "\n",
    "\n",
    "### Floating Point Numbers\n",
    "\n",
    "**Floating Point Representation:** Numbers with a decimal point are treated as floating-point values.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "x = 3.141\n",
    "type(x)\n",
    "```\n",
    "\n",
    "\n",
    "**Maximum Float Value:** Python handles large floats, converting them to infinity if they exceed the maximum representable value.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "1.7976931348623157e+308 * 2  # Output: inf\n",
    "```\n",
    "\n",
    "\n",
    "### Complex Numbers\n",
    "\n",
    "**Complex Number Representation:** Complex numbers have a real and an imaginary part.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "c = 2 + 4j\n",
    "type(c)\n",
    "```\n",
    "\n",
    "\n",
    "- **Accessors for Complex Numbers:**\n",
    "  - `c.real`: Real part of the complex number.\n",
    "  - `c.imag`: Imaginary part of the complex number.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "print(c.real)\n",
    "print(c.imag)\n",
    "```\n",
    "\n",
    "\n",
    "**Complex Conjugate:** Use the `.conjugate()` method to get the complex conjugate.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "c = c.conjugate()\n",
    "print(c)\n",
    "```\n",
    "\n",
    ":::\n",
    "\n",
    "\n",
    "## Operators\n",
    "\n",
    "Python provides a variety of operators for performing operations on variables and values. Here we'll cover the most common operators used in scientific programming.\n",
    "\n",
    "::: {.panel-tabset}\n",
    "### Arithmetic Operators\n",
    "\n",
    "These operators perform basic mathematical operations:\n",
    "\n",
    "| Operator | Name | Example | Result |\n",
    "|----------|------|---------|--------|\n",
    "| `+` | Addition | `5 + 3` | 8 |\n",
    "| `-` | Subtraction | `5 - 3` | 2 |\n",
    "| `*` | Multiplication | `5 * 3` | 15 |\n",
    "| `/` | Division | `5 / 3` | 1.6666... |\n",
    "| `//` | Floor Division | `5 // 3` | 1 |\n",
    "| `%` | Modulus (remainder) | `5 % 3` | 2 |\n",
    "| `**` | Exponentiation | `5 ** 3` | 125 |\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# Examples of arithmetic operators\n",
    "print(f\"Addition: 5 + 3 = {5 + 3}\")\n",
    "print(f\"Division: 5 / 3 = {5 / 3}\")\n",
    "print(f\"Floor Division: 5 // 3 = {5 // 3}\")\n",
    "print(f\"Exponentiation: 5 ** 3 = {5 ** 3}\")\n",
    "```\n",
    "\n",
    "\n",
    "### Comparison Operators\n",
    "\n",
    "These operators are used to compare values:\n",
    "\n",
    "| Operator | Description | Example |\n",
    "|----------|-------------|---------|\n",
    "| `==` | Equal to | `x == y` |\n",
    "| `!=` | Not equal to | `x != y` |\n",
    "| `>` | Greater than | `x > y` |\n",
    "| `<` | Less than | `x < y` |\n",
    "| `>=` | Greater than or equal to | `x >= y` |\n",
    "| `<=` | Less than or equal to | `x <= y` |\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# Examples of comparison operators\n",
    "x, y = 5, 3\n",
    "print(f\"x = {x}, y = {y}\")\n",
    "print(f\"x == y: {x == y}\")\n",
    "print(f\"x > y: {x > y}\")\n",
    "print(f\"x <= y: {x <= y}\")\n",
    "```\n",
    "\n",
    "\n",
    "### Logical Operators\n",
    "\n",
    "Used to combine conditional statements:\n",
    "\n",
    "| Operator | Description | Example |\n",
    "|----------|-------------|---------|\n",
    "| `and` | Returns True if both statements are true | `x > 0 and x < 10` |\n",
    "| `or` | Returns True if one of the statements is true | `x < 0 or x > 10` |\n",
    "| `not` | Reverses the result, returns False if the result is true | `not(x > 0 and x < 10)` |\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# Examples of logical operators\n",
    "x = 7\n",
    "print(f\"x = {x}\")\n",
    "print(f\"x > 0 and x < 10: {x > 0 and x < 10}\")\n",
    "print(f\"x < 0 or x > 10: {x < 0 or x > 10}\")\n",
    "print(f\"not(x > 0): {not(x > 0)}\")\n",
    "```\n",
    "\n",
    "\n",
    "### Assignment Operators\n",
    "\n",
    "Python provides shorthand operators for updating variables:\n",
    "\n",
    "| Operator | Example | Equivalent to |\n",
    "|----------|---------|---------------|\n",
    "| `=` | `x = 5` | `x = 5` |\n",
    "| `+=` | `x += 3` | `x = x + 3` |\n",
    "| `-=` | `x -= 3` | `x = x - 3` |\n",
    "| `*=` | `x *= 3` | `x = x * 3` |\n",
    "| `/=` | `x /= 3` | `x = x / 3` |\n",
    "| `//=` | `x //= 3` | `x = x // 3` |\n",
    "| `%=` | `x %= 3` | `x = x % 3` |\n",
    "| `**=` | `x **= 3` | `x = x ** 3` |\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# Examples of assignment operators\n",
    "x = 10\n",
    "print(f\"Initial x: {x}\")\n",
    "\n",
    "x += 5\n",
    "print(f\"After x += 5: {x}\")\n",
    "\n",
    "x *= 2\n",
    "print(f\"After x *= 2: {x}\")\n",
    "```\n",
    "\n",
    "\n",
    "::: {.callout-tip title=\"Operator Precedence\" collapse=true}\n",
    "Python follows the standard mathematical order of operations (PEMDAS):\n",
    "\n",
    "1. Parentheses\n",
    "2. Exponentiation (`**`)\n",
    "3. Multiplication and Division (`*`, `/`, `//`, `%`)\n",
    "4. Addition and Subtraction (`+`, `-`)\n",
    "\n",
    "When operators have the same precedence, they are evaluated from left to right.\n",
    "\n",
    "\n",
    "```{pyodide}\n",
    "#| autorun: false\n",
    "# Operator precedence example\n",
    "result = 2 + 3 * 4 ** 2\n",
    "print(f\"2 + 3 * 4 ** 2 = {result}\")  # 2 + 3 * 16 = 2 + 48 = 50\n",
    "\n",
    "# Using parentheses to change precedence\n",
    "result = (2 + 3) * 4 ** 2\n",
    "print(f\"(2 + 3) * 4 ** 2 = {result}\")  # 5 * 16 = 80\n",
    "```\n",
    "\n",
    ":::\n",
    ":::"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/fci/quarto_env/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
