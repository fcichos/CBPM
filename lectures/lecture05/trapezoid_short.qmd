## Trapezoid Method

### Theory and Implementation

![Trapezoid Method Illustration](img/trapez.png)

The Trapezoid method improves upon the Box method by approximating the function with linear segments between consecutive points. Instead of using constant values within each interval, it connects adjacent points with straight lines, forming trapezoids.

The mathematical formula for the Trapezoid method is:

\begin{equation}
\int_{a}^{b} f(x) dx \approx \sum_{i=1}^{N-1} \frac{f(x_i) + f(x_{i+1})}{2} \Delta x
\end{equation}

Where:
- $\Delta x = \frac{b-a}{N-1}$ is the width of each interval
- $x_i$ are the sample points

This method is particularly effective for smoothly varying functions, which are common in physical systems.

```{pyodide}
def int_trap(f, a, b, N):
    """Trapezoid method integration"""
    if N < 2:
        raise ValueError("N must be at least 2")
    x = np.linspace(a, b, N)
    y = f(x)
    dx = (b-a)/(N-1)
    return np.sum((y[1:] + y[:-1]) * dx/2)

# Simple demonstration
def f_demo(x):
    return x**2  # Using f(x) = x² for demonstration

# Demonstrate the trapezoid method visually
x_demo = np.linspace(0, 1, 6)
y_demo = f_demo(x_demo)

plt.figure(figsize=get_size(15, 8))

# Plot the actual function
x_fine = np.linspace(0, 1, 1000)
y_fine = f_demo(x_fine)
plt.plot(x_fine, y_fine, 'b-', label='Actual function f(x) = x²')

# Plot the trapezoids
for i in range(len(x_demo)-1):
    plt.fill_between([x_demo[i], x_demo[i+1]], 
                    [y_demo[i], y_demo[i+1]], 
                    alpha=0.3, color='green')
    plt.plot([x_demo[i], x_demo[i+1]], [y_demo[i], y_demo[i+1]], 'g-')

plt.plot(x_demo, y_demo, 'go', label='Sample points')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Trapezoid Method Visualization')
plt.grid(True)
plt.legend()
plt.show()

# Quick convergence test
exact = 1/3  # Exact integral of x² from 0 to 1
N_test = [5, 10, 50, 100]
errors = [abs(int_trap(f_demo, 0, 1, n) - exact) for n in N_test]

print("Trapezoid Method Error Convergence:")
print(f"{'N':<8} {'Error':<15}")
print("-" * 24)
for n, err in zip(N_test, errors):
    print(f"{n:<8} {err:.10f}")
```

### Physics Application: Electric Potential Calculation

The Trapezoid method is well-suited for calculating the electric potential due to a charge distribution. For a linear charge density $\lambda(x)$ along the x-axis, the potential at point $(0,d)$ is given by:

\begin{equation}
V(0,d) = \frac{1}{4\pi\epsilon_0} \int_{a}^{b} \frac{\lambda(x)}{\sqrt{x^2 + d^2}} dx
\end{equation}

This integral can be efficiently computed using the Trapezoid method, especially when the charge distribution is known at discrete points.